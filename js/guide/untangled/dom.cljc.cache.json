["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Object",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$untangled.dom","~:imports",null,"~:requires",["^ ","~$str","~$clojure.string","^=","^=","~$om","~$om.next","^?","^?","~$log","~$untangled.client.logging","^A","^A","~$omp","~$om.next.protocols","^C","^C"],"~:uses",null,"~:defs",["^ ","~$unique-key",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/dom.cljc","~:line",7,"~:column",7,"~:end-line",7,"~:end-column",17,"~:arglists",["~#list",["~$quote",["^O",[[]]]]],"~:doc","Get a unique string-based key. Never returns the same value."],"^8","~$untangled.dom/unique-key","~:variadic",false,"^I","resources/public/js/guide/untangled/dom.cljc","^M",17,"~:method-params",["^O",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^K",1,"^J",7,"^L",7,"~:max-fixed-arity",0,"~:fn-var",true,"^N",["^O",["^P",["^O",[[]]]]],"^Q","Get a unique string-based key. Never returns the same value."],"~$force-render",["^ ","^G",null,"^H",["^ ","^I","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/dom.cljc","^J",14,"^K",7,"^L",14,"^M",19,"^N",["^O",["^P",["^O",[["~$reconciler","~$keywords"],["^Z"]]]]],"^Q","Re-render components. If only a reconciler is supplied then it forces a full DOM re-render by updating the :ui/react-key\n  in app state and forcing Om to re-render the entire DOM, which only works properly if you query\n  for :ui/react-key in your Root render component and add that as the react :key to your top-level element.\n\n  If you supply an additional vector of keywords and idents then it will ask Om to rerender only those components that mention\n  those things in their queries.","~:top-fn",["^ ","^S",false,"^W",2,"^T",["^O",[["^Z","^["],["^Z"]]],"^N",["^O",[["^Z","^["],["^Z"]]],"^V",["^O",[null,null]]]],"^8","~$untangled.dom/force-render","^S",false,"^I","resources/public/js/guide/untangled/dom.cljc","^M",19,"^10",["^ ","^S",false,"^W",2,"^T",["^O",[["^Z","^["],["^Z"]]],"^N",["^O",[["^Z","^["],["^Z"]]],"^V",["^O",[null,null]]],"^T",["^O",[["^Z","^["],["^Z"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",14,"^L",14,"^W",2,"^X",true,"^N",["^O",[["^Z","^["],["^Z"]]],"^Q","Re-render components. If only a reconciler is supplied then it forces a full DOM re-render by updating the :ui/react-key\n  in app state and forcing Om to re-render the entire DOM, which only works properly if you query\n  for :ui/react-key in your Root render component and add that as the react :key to your top-level element.\n\n  If you supply an additional vector of keywords and idents then it will ask Om to rerender only those components that mention\n  those things in their queries."],"~$append-class",["^ ","^G",null,"^H",["^ ","^I","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/dom.cljc","^J",30,"^K",7,"^L",30,"^M",19,"^N",["^O",["^P",["^O",[["~$component","~$local-state-key"]]]]],"^Q","Append a CSS class. Given a component and a local state key or keys, to be passed to `om/get-state`,\n  returns a function that takes the `state-value` to test, a `default-class-string`,\n  and optionaol `:when-true` and `:when-false`. The values `:when-false` and `when-true`\n  are appended to `default-class-string` after the test against `state-value`.\n\n  Parameters:\n  `component`: The component to pass to `om/get-state`.\n  `local-state-key`: The key or keys to pass to `om/get-state`."],"^8","~$untangled.dom/append-class","^S",false,"^I","resources/public/js/guide/untangled/dom.cljc","^M",19,"^T",["^O",[["^13","^14"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",30,"^L",30,"^W",2,"^X",true,"^N",["^O",["^P",["^O",[["^13","^14"]]]]],"^Q","Append a CSS class. Given a component and a local state key or keys, to be passed to `om/get-state`,\n  returns a function that takes the `state-value` to test, a `default-class-string`,\n  and optionaol `:when-true` and `:when-false`. The values `:when-false` and `when-true`\n  are appended to `default-class-string` after the test against `state-value`.\n\n  Parameters:\n  `component`: The component to pass to `om/get-state`.\n  `local-state-key`: The key or keys to pass to `om/get-state`."],"~$toggle-class",["^ ","^G",null,"^H",["^ ","^I","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/dom.cljc","^J",47,"^K",7,"^L",47,"^M",19,"^N",["^O",["^P",["^O",[["~$data","~$key","~$always-classes","~$&",["^ ","~:keys",["~$when-true","~$when-false"],"~:or",["^ ","^1;","active","^1<",""]]]]]]],"^Q","Adds the 'visible' CSS class and removes the 'hidden' class to the pre-supplied class string based on the truthiness\n  of the value in data at key.\n\n  Parameters:\n  `data`: A map containing the component's state.\n  `key`: A key within `data`.\n  `always-classes`: A string that has the CSS classes to always return in the returned string.\n\n  Optional named parameters:\n\n  `:when-true v` : This string to add when the key's value is true. Defaults to \"active\".\n  `:when-false v` : The string to add when the key's value is false. Defaults to \"\".\n  ","^10",["^ ","^S",true,"^W",3,"^T",[["^O",["^17","^18","^19",["^ ","^1:",["^1;","^1<"],"^1=",["^ ","^1;","active","^1<",""]]]]],"^N",["^O",[["^17","^18","^19","~$&",["^ ","^1:",["^1;","^1<"],"^1=",["^ ","^1;","active","^1<",""]]]]],"^V",["^O",[null]]]],"^8","~$untangled.dom/toggle-class","^S",true,"^I","resources/public/js/guide/untangled/dom.cljc","^M",19,"^10",["^ ","^S",true,"^W",3,"^T",[["^O",["^17","^18","^19",["^ ","^1:",["^1;","^1<"],"^1=",["^ ","^1;","active","^1<",""]]]]],"^N",["^O",[["^17","^18","^19","~$&",["^ ","^1:",["^1;","^1<"],"^1=",["^ ","^1;","active","^1<",""]]]]],"^V",["^O",[null]]],"^T",[["^O",["^17","^18","^19",["^ ","^1:",["^1;","^1<"],"^1=",["^ ","^1;","active","^1<",""]]]]],"^U",null,"^V",["^O",[null]],"^K",1,"^J",47,"^L",47,"^W",3,"^X",true,"^N",["^O",[["^17","^18","^19","~$&",["^ ","^1:",["^1;","^1<"],"^1=",["^ ","^1;","active","^1<",""]]]]],"^Q","Adds the 'visible' CSS class and removes the 'hidden' class to the pre-supplied class string based on the truthiness\n  of the value in data at key.\n\n  Parameters:\n  `data`: A map containing the component's state.\n  `key`: A key within `data`.\n  `always-classes`: A string that has the CSS classes to always return in the returned string.\n\n  Optional named parameters:\n\n  `:when-true v` : This string to add when the key's value is true. Defaults to \"active\".\n  `:when-false v` : The string to add when the key's value is false. Defaults to \"\".\n  "],"~$text-value",["^ ","^G",null,"^H",["^ ","^I","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/dom.cljc","^J",67,"^K",7,"^L",67,"^M",17,"^N",["^O",["^P",["^O",[["~$evt"]]]]],"^Q","Returns the text value from an input change event."],"^8","~$untangled.dom/text-value","^S",false,"^I","resources/public/js/guide/untangled/dom.cljc","^M",17,"^T",["^O",[["^1@"]]],"^U",null,"^V",["^O",[null,null]],"^K",1,"^J",67,"^L",67,"^W",1,"^X",true,"^N",["^O",["^P",["^O",[["^1@"]]]]],"^Q","Returns the text value from an input change event."]],"~:require-macros",["^ ","^>","^?","^?","^?"],"~:cljs.analyzer/constants",["^ ","~:seen",["^7",["~:ui/react-key","~:else","~:when-false","~:when-true"]],"~:order",["^1E","^1H","^1G","^1F"]],"^Q",null]
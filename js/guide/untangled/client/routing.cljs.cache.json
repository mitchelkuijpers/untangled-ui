["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$untangled.client.routing","~:imports",null,"~:requires",["^ ","~$m","~$untangled.client.mutations","^;","^;","~$untangled.client.core","^<","~$om.next","^=","~$om.dom","^>","~$log","~$untangled.client.logging","^@","^@"],"~:uses",null,"~:defs",["^ ","~$route-to",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/routing.cljs","~:line",77,"~:column",7,"~:end-line",77,"~:end-column",15,"~:arglists",["~#list",["~$quote",["^L",[[["^ ","~:keys",["~$handler","~$route-params"]]]]]]],"~:doc","Om Mutation (use in transact! only):\n  Change the application's overall UI route to the given route by handler. Handler must be a single keyword that indicates an entry in\n  your routing tree (which must be in the initial app state of your UI root). route-params is a map of key-value pairs\n  that will be substituted in the target screen idents of the routing tree."],"^7","~$untangled.client.routing/route-to","~:variadic",false,"^F","resources/public/js/guide/untangled/client/routing.cljs","^J",15,"~:method-params",["^L",[["~$p__704444"]]],"~:protocol-impl",null,"~:arglists-meta",["^L",[null,null]],"^H",1,"^G",77,"^I",77,"~:max-fixed-arity",1,"~:fn-var",true,"^K",["^L",["^M",["^L",[[["^ ","^N",["^O","^P"]]]]]]],"^Q","Om Mutation (use in transact! only):\n  Change the application's overall UI route to the given route by handler. Handler must be a single keyword that indicates an entry in\n  your routing tree (which must be in the initial app state of your UI root). route-params is a map of key-value pairs\n  that will be substituted in the target screen idents of the routing tree."],"~$routing-tree-key",["^ ","^7","~$untangled.client.routing/routing-tree-key","^F","resources/public/js/guide/untangled/client/routing.cljs","^G",9,"^H",1,"^I",9,"^J",22,"^E",["^ ","^F","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/routing.cljs","^G",9,"^H",6,"^I",9,"^J",22],"~:tag","~$cljs.core/Keyword"],"~$router-instruction",["^ ","^D",null,"^E",["^ ","^F","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/routing.cljs","^G",41,"^H",7,"^I",41,"^J",25,"^K",["^L",["^M",["^L",[["~$router-id","~$target-screen-ident"]]]]],"^Q","Return the definition of a change-route instruction."],"^7","~$untangled.client.routing/router-instruction","^S",false,"^F","resources/public/js/guide/untangled/client/routing.cljs","^J",25,"^T",["^L",[["^13","^14"]]],"^V",null,"^W",["^L",[null,null]],"^H",1,"^G",41,"^I",41,"^X",2,"^Y",true,"^K",["^L",["^M",["^L",[["^13","^14"]]]]],"^Q","Return the definition of a change-route instruction."],"~$update-routing-links",["^ ","^D",null,"^E",["^ ","^F","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/routing.cljs","^G",66,"^H",7,"^I",66,"^J",27,"^K",["^L",["^M",["^L",[["~$state-map",["^ ","^N",["^O","^P"]]]]]]],"^Q","Given the app state map, returns a new map that has the routing graph links updated for the given route/params\n  as a bidi match."],"^7","~$untangled.client.routing/update-routing-links","^S",false,"^F","resources/public/js/guide/untangled/client/routing.cljs","^J",27,"^T",["^L",[["^17","~$p__704406"]]],"^V",null,"^W",["^L",[null,null]],"^H",1,"^G",66,"^I",66,"^X",2,"^Y",true,"^K",["^L",["^M",["^L",[["^17",["^ ","^N",["^O","^P"]]]]]]],"^Q","Given the app state map, returns a new map that has the routing graph links updated for the given route/params\n  as a bidi match."],"~$set-ident-route-params",["^ ","^D",null,"^E",["^ ","^F","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/routing.cljs","^G",51,"^H",8,"^I",51,"^J",30,"~:private",true,"^K",["^L",["^M",["^L",[["~$ident","^P"]]]]],"^Q","Replace any keywords of the form :params/X with the value of (get route-params X)"],"^1;",true,"^7","~$untangled.client.routing/set-ident-route-params","^S",false,"^F","resources/public/js/guide/untangled/client/routing.cljs","^J",30,"^T",["^L",[["^1<","^P"]]],"^V",null,"^W",["^L",[null,null]],"^H",1,"^G",51,"^I",51,"^X",2,"^Y",true,"^K",["^L",["^M",["^L",[["^1<","^P"]]]]],"^Q","Replace any keywords of the form :params/X with the value of (get route-params X)"],"~$current-route",["^ ","^D",null,"^E",["^ ","^F","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/routing.cljs","^G",47,"^H",7,"^I",47,"^J",20,"^K",["^L",["^M",["^L",[["^17","^13"]]]]],"^Q","Get the current route from the router with the given id"],"^7","~$untangled.client.routing/current-route","^S",false,"^F","resources/public/js/guide/untangled/client/routing.cljs","^J",20,"^T",["^L",[["^17","^13"]]],"^V",null,"^W",["^L",[null,null]],"^H",1,"^G",47,"^I",47,"^X",2,"^Y",true,"^K",["^L",["^M",["^L",[["^17","^13"]]]]],"^Q","Get the current route from the router with the given id"],"~$make-route",["^ ","^D",null,"^E",["^ ","^F","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/routing.cljs","^G",12,"^H",7,"^I",12,"^J",17,"^K",["^L",["^M",["^L",[["~$name","~$routing-instructions"]]]]],"^Q","Make a route name that executes the provided routing instructions to change which screen in on the UI. routing-instructions\n  must be a vector. Returns an item that can be passed to `routing-tree` to generate your overall application's routing\n  plan.\n\n  `(make-route :route/a [(router-instruction ...) ...])`\n\n  "],"^7","~$untangled.client.routing/make-route","^S",false,"^F","resources/public/js/guide/untangled/client/routing.cljs","^J",17,"^T",["^L",[["^1A","^1B"]]],"^V",null,"^W",["^L",[null,null]],"^H",1,"^G",12,"^I",12,"^X",2,"^Y",true,"^K",["^L",["^M",["^L",[["^1A","^1B"]]]]],"^Q","Make a route name that executes the provided routing instructions to change which screen in on the UI. routing-instructions\n  must be a vector. Returns an item that can be passed to `routing-tree` to generate your overall application's routing\n  plan.\n\n  `(make-route :route/a [(router-instruction ...) ...])`\n\n  "],"~$set-route",["^ ","^D",null,"^E",["^ ","^F","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/routing.cljs","^G",60,"^H",7,"^I",60,"^J",16,"^K",["^L",["^M",["^L",[["^17","^13","~$screen-ident"]]]]],"^Q","Set the given screen-ident as the current route on the router with the given ID. Returns a new application\n  state map."],"^7","~$untangled.client.routing/set-route","^S",false,"^F","resources/public/js/guide/untangled/client/routing.cljs","^J",16,"^T",["^L",[["^17","^13","^1E"]]],"^V",null,"^W",["^L",[null,null]],"^H",1,"^G",60,"^I",60,"^X",3,"^Y",true,"^K",["^L",["^M",["^L",[["^17","^13","^1E"]]]]],"^Q","Set the given screen-ident as the current route on the router with the given ID. Returns a new application\n  state map."],"~$routers-table",["^ ","^7","~$untangled.client.routing/routers-table","^F","resources/public/js/guide/untangled/client/routing.cljs","^G",10,"^H",1,"^I",10,"^J",19,"^E",["^ ","^F","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/routing.cljs","^G",10,"^H",6,"^I",10,"^J",19],"^10","^11"],"~$routing-tree",["^ ","^D",null,"^E",["^ ","^F","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/routing.cljs","^G",24,"^H",7,"^I",24,"^J",19,"^K",["^L",["^M",["^L",[["~$&","~$routes"]]]]],"^Q","Generate initial state for your application's routing tree. The return value of this should be merged into your overall\n  app state in your Root UI component\n\n  ```\n  (defui Root\n    static uc/InitialAppState\n    (initial-state [cls params]  (merge {:child-key (uc/get-initial-state Child)}\n                                        (routing-tree\n                                          (make-route :route/a [(router-instruction ...)])\n                                          ...)))\n    ...\n  ```\n  ","~:top-fn",["^ ","^S",true,"^X",0,"^T",[["^L",["^1J"]]],"^K",["^L",[["~$&","^1J"]]],"^W",["^L",[null]]]],"^7","~$untangled.client.routing/routing-tree","^S",true,"^F","resources/public/js/guide/untangled/client/routing.cljs","^J",19,"^1K",["^ ","^S",true,"^X",0,"^T",[["^L",["^1J"]]],"^K",["^L",[["~$&","^1J"]]],"^W",["^L",[null]]],"^T",[["^L",["^1J"]]],"^V",null,"^W",["^L",[null]],"^H",1,"^G",24,"^I",24,"^X",0,"^Y",true,"^K",["^L",[["~$&","^1J"]]],"^Q","Generate initial state for your application's routing tree. The return value of this should be merged into your overall\n  app state in your Root UI component\n\n  ```\n  (defui Root\n    static uc/InitialAppState\n    (initial-state [cls params]  (merge {:child-key (uc/get-initial-state Child)}\n                                        (routing-tree\n                                          (make-route :route/a [(router-instruction ...)])\n                                          ...)))\n    ...\n  ```\n  "]],"~:require-macros",["^ ","^8","^8","~$m","^;","^;","^;","^=","^=","^>","^>"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^R","~:untangled.client.routing.routers/by-id","~:current-route","^7","~:instructions","~:state","~:route-params","~:untangled.client.routing/routing-tree","~:target-screen","~:target-router","~:action","~:handler"]],"~:order",["^1U","^1P","^7","^1R","^1W","^1V","^1Q","^1Y","^1T","^R","^1S","^1X"]],"^Q",null]
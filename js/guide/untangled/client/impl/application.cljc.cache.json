["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Object",["^ "]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$untangled.client.impl.application","~:imports",null,"~:requires",["^ ","~$log","~$untangled.client.logging","~$i18n","~$untangled.i18n.core","~$untangled.client.impl.network","^A","~$plumbing","~$untangled.client.impl.om-plumbing","~$async","~$cljs.core.async","~$untangled.client.impl.util","^F","~$untangled.client.impl.data-fetch","^G","^E","^E","^@","^@","~$util","^F","~$net","^A","^>","^>","~$om","~$om.next","^C","^C","^K","^K","~$f","^G"],"~:uses",null,"~:defs",["^ ","~$enqueue-mutations",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","~:line",42,"~:column",7,"~:end-line",42,"~:end-column",24,"~:arglists",["~#list",["~$quote",["^W",[[["^ ","~:keys",["~$send-queues","~$networking"],"~:as","~$app"],"~$remote-tx-map","~$cb"]]]]],"~:doc","Splits out the (remote) mutations and fallbacks in a transaction, creates an error handler that can\n   trigger fallbacks, and enqueues the remote mutations on the network queue."],"^9","~$untangled.client.impl.application/enqueue-mutations","~:variadic",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",24,"~:method-params",["^W",[["~$p__702396","^12","^13"]]],"~:protocol-impl",null,"~:arglists-meta",["^W",[null,null]],"^S",1,"^R",42,"^T",42,"~:max-fixed-arity",3,"~:fn-var",true,"^V",["^W",["^X",["^W",[[["^ ","^Y",["^Z","^["],"^10","^11"],"^12","^13"]]]]],"^14","Splits out the (remote) mutations and fallbacks in a transaction, creates an error handler that can\n   trigger fallbacks, and enqueues the remote mutations on the network queue."],"~$sweep-merge",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",166,"^S",7,"^T",166,"^U",18,"^V",["^W",["^X",["^W",[["~$target","~$source"]]]]],"^14","Do a recursive merge of source into target, but remove any target data that is marked as missing in the response. The\n  missing marker is generated in the source when something has been asked for in the query, but had no value in the\n  response. This allows us to correctly remove 'empty' data from the database without accidentally removing something\n  that may still exist on the server (in truth we don't know its status, since it wasn't asked for, but we leave\n  it as our 'best guess')"],"^9","~$untangled.client.impl.application/sweep-merge","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",18,"^17",["^W",[["^1>","^1?"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",166,"^T",166,"^1;",2,"^1<",true,"^V",["^W",["^X",["^W",[["^1>","^1?"]]]]],"^14","Do a recursive merge of source into target, but remove any target data that is marked as missing in the response. The\n  missing marker is generated in the source when something has been asked for in the query, but had no value in the\n  response. This allows us to correctly remove 'empty' data from the database without accidentally removing something\n  that may still exist on the server (in truth we don't know its status, since it wasn't asked for, but we leave\n  it as our 'best guess')"],"~$initialize-global-error-callbacks",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",231,"^S",7,"^T",231,"^U",40,"^V",["^W",["^X",["^W",[["^11"]]]]]],"^9","~$untangled.client.impl.application/initialize-global-error-callbacks","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",40,"^17",["^W",[["^11"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",231,"^T",231,"^1;",1,"^1<",true,"^V",["^W",["^X",["^W",[["^11"]]]]]],"~$start-network-sequential-processing",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",121,"^S",7,"^T",121,"^U",42,"^V",["^W",["^X",["^W",[[["^ ","^Y",["^[","^Z","~$response-channels"]]]]]]],"^14","Starts a async go loop that sends network requests on a networking object's request queue. Must be called once and only\n  once for each active networking object on the UI. Each iteration of the loop pulls off a\n  single request, sends it, waits for the response, and then repeats. Gives the appearance of a separate networking\n  'thread' using core async."],"^9","~$untangled.client.impl.application/start-network-sequential-processing","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",42,"^17",["^W",[["~$p__702863"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",121,"^T",121,"^1;",1,"^1<",true,"^V",["^W",["^X",["^W",[[["^ ","^Y",["^[","^Z","^1D"]]]]]]],"^14","Starts a async go loop that sends network requests on a networking object's request queue. Must be called once and only\n  once for each active networking object on the UI. Each iteration of the loop pulls off a\n  single request, sends it, waits for the response, and then repeats. Gives the appearance of a separate networking\n  'thread' using core async."],"~$initialize-internationalization",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",141,"^S",7,"^T",141,"^U",38,"^V",["^W",["^X",["^W",[["~$reconciler"]]]]],"^14","Configure a re-render when the locale changes. During startup this function will be called once for each\n  reconciler that is running on a page."],"^9","~$untangled.client.impl.application/initialize-internationalization","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",38,"^17",["^W",[["^1H"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",141,"^T",141,"^1;",1,"^1<",true,"^V",["^W",["^X",["^W",[["^1H"]]]]],"^14","Configure a re-render when the locale changes. During startup this function will be called once for each\n  reconciler that is running on a page."],"~$send-payload",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",99,"^S",8,"^T",99,"^U",20,"~:private",true,"^V",["^W",["^X",["^W",[["~$network","~$payload","~$send-complete"]]]]],"^14","Sends a network payload. There are two kinds of payloads in Untanged. The first is\n  for reads, which are tracked by load descriptors in the app state. These load descriptors\n  tell the plumbing how to handle the response, and expect to only be merged in once. Mutations\n  do not have a payload, and can technically received progress updates from the network. The built-in\n  networking does not (currently) give progress events, but plugin networking can. It is currently not\n  supported to give an update on a load, so this function is careful to detect that a payload is a send\n  and turns all but the last update into a no-op. The send-complete function comes from the\n  network sequential processing loop, and when called unblocks the network processing to allow the\n  next request to go. Be very careful with this code, as bugs will cause applications to stop responding\n  to remote requests."],"^1K",true,"^9","~$untangled.client.impl.application/send-payload","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",20,"^17",["^W",[["^1L","^1M","^1N"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",99,"^T",99,"^1;",3,"^1<",true,"^V",["^W",["^X",["^W",[["^1L","^1M","^1N"]]]]],"^14","Sends a network payload. There are two kinds of payloads in Untanged. The first is\n  for reads, which are tracked by load descriptors in the app state. These load descriptors\n  tell the plumbing how to handle the response, and expect to only be merged in once. Mutations\n  do not have a payload, and can technically received progress updates from the network. The built-in\n  networking does not (currently) give progress events, but plugin networking can. It is currently not\n  supported to give an update on a load, so this function is careful to detect that a payload is a send\n  and turns all but the last update into a no-op. The send-complete function comes from the\n  network sequential processing loop, and when called unblocks the network processing to allow the\n  next request to go. Be very careful with this code, as bugs will cause applications to stop responding\n  to remote requests."],"~$fallback-handler",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",15,"^S",7,"^T",15,"^U",23,"^V",["^W",["^X",["^W",[[["^ ","^Y",["^1H"]],"~$query"]]]]],"^14","This internal function is responsible for generating and returning a function that can accomplish calling the fallbacks that\n  appear in an incoming Om transaction, which is in turn used by the error-handling logic of the plumbing."],"^9","~$untangled.client.impl.application/fallback-handler","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",23,"^17",["^W",[["~$p__702328","^1Q"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",15,"^T",15,"^1;",2,"^1<",true,"^V",["^W",["^X",["^W",[[["^ ","^Y",["^1H"]],"^1Q"]]]]],"^14","This internal function is responsible for generating and returning a function that can accomplish calling the fallbacks that\n  appear in an incoming Om transaction, which is in turn used by the error-handling logic of the plumbing."],"~$enqueue",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",27,"^S",8,"^T",27,"^U",15,"^1K",true,"^V",["^W",["^X",["^W",[["~$q","~$v"]]]]],"^14","Enqueue a send to the network queue. This is a standalone function because we cannot mock core async functions."],"^1K",true,"^9","~$untangled.client.impl.application/enqueue","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",15,"^17",["^W",[["~$q","~$v"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",27,"^T",27,"^1;",2,"^1<",true,"^V",["^W",["^X",["^W",[["~$q","~$v"]]]]],"^14","Enqueue a send to the network queue. This is a standalone function because we cannot mock core async functions."],"~$sweep-one",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",150,"^S",7,"^T",150,"^U",16,"^V",["^W",["^X",["^W",[["~$m"]]]]],"^14","Remove not-found keys from m (non-recursive)"],"^9","~$untangled.client.impl.application/sweep-one","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",16,"^17",["^W",[["~$m"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",150,"^T",150,"^1;",1,"^1<",true,"^V",["^W",["^X",["^W",[["~$m"]]]]],"^14","Remove not-found keys from m (non-recursive)"],"~$server-send",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",91,"^S",7,"^T",91,"^U",18,"^V",["^W",["^X",["^W",[["^11","^12","^13"]]]]],"^14","Puts queries/mutations (and their corresponding callbacks) onto the send queue. The networking code will pull these\n  off one at a time and send them through the real networking layer. Reads are guaranteed to *follow* writes."],"^9","~$untangled.client.impl.application/server-send","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",18,"^17",["^W",[["^11","^12","^13"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",91,"^T",91,"^1;",3,"^1<",true,"^V",["^W",["^X",["^W",[["^11","^12","^13"]]]]],"^14","Puts queries/mutations (and their corresponding callbacks) onto the send queue. The networking code will pull these\n  off one at a time and send them through the real networking layer. Reads are guaranteed to *follow* writes."],"~$sweep",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",157,"^S",7,"^T",157,"^U",12,"^V",["^W",["^X",["^W",[["~$m"]]]]],"^14","Remove all of the not-found keys (recursively) from v, stopping at marked leaves (if present)"],"^9","~$untangled.client.impl.application/sweep","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",12,"^17",["^W",[["~$m"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",157,"^T",157,"^1;",1,"^1<",true,"^V",["^W",["^X",["^W",[["~$m"]]]]],"^14","Remove all of the not-found keys (recursively) from v, stopping at marked leaves (if present)"],"~$real-send",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",32,"^S",7,"^T",32,"^U",16,"^V",["^W",["^X",["^W",[["^I","~$tx","~$on-done","~$on-error","~$on-load"]]]]],"^14","Do a properly-plumbed network send. This function recursively strips ui attributes from the tx and pushes the tx over\n  the network. It installs the given on-load and on-error handlers to deal with the network response."],"^9","~$untangled.client.impl.application/real-send","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",16,"^17",["^W",[["^I","^21","^22","^23","^24"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",32,"^T",32,"^1;",5,"^1<",true,"^V",["^W",["^X",["^W",[["^I","^21","^22","^23","^24"]]]]],"^14","Do a properly-plumbed network send. This function recursively strips ui attributes from the tx and pushes the tx over\n  the network. It installs the given on-load and on-error handlers to deal with the network response."],"~$enqueue-reads",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",58,"^S",7,"^T",58,"^U",20,"^V",["^W",["^X",["^W",[[["^ ","^Y",["^Z","^1H","^["]]]]]]],"^14","Finds any loads marked `parallel` and triggers real network requests immediately. Remaining loads\n  are pulled into a single fetch payload (combined into one query) and enqueued behind any prior mutations/reads that\n  were already requested in a prior UI/event cycle. Thus non-parallel reads are processed in clusters grouped due to UI\n  events (a single event might trigger many reads which will all go to the server as a single combined request).\n  Further UI events that trigger remote interaction will end up waiting until prior network request(s) are complete.\n\n  This ensures that default reasoning is simple and sequential in the face of optimistic UI updates (real network\n  traffic characteristics could cause out of order processing, and you would not want\n  a 'create list' to be processed on the server *after* an 'add an item to the list'). "],"^9","~$untangled.client.impl.application/enqueue-reads","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",20,"^17",["^W",[["~$p__702461"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",58,"^T",58,"^1;",1,"^1<",true,"^V",["^W",["^X",["^W",[[["^ ","^Y",["^Z","^1H","^["]]]]]]],"^14","Finds any loads marked `parallel` and triggers real network requests immediately. Remaining loads\n  are pulled into a single fetch payload (combined into one query) and enqueued behind any prior mutations/reads that\n  were already requested in a prior UI/event cycle. Thus non-parallel reads are processed in clusters grouped due to UI\n  events (a single event might trigger many reads which will all go to the server as a single combined request).\n  Further UI events that trigger remote interaction will end up waiting until prior network request(s) are complete.\n\n  This ensures that default reasoning is simple and sequential in the face of optimistic UI updates (real network\n  traffic characteristics could cause out of order processing, and you would not want\n  a 'create list' to be processed on the server *after* an 'add an item to the list'). "],"~$merge-handler",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",181,"^S",7,"^T",181,"^U",20,"^V",["^W",["^X",["^W",[["~$mutation-merge","^1>","^1?"]]]]]],"^9","~$untangled.client.impl.application/merge-handler","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",20,"^17",["^W",[["^2:","^1>","^1?"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",181,"^T",181,"^1;",3,"^1<",true,"^V",["^W",["^X",["^W",[["^2:","^1>","^1?"]]]]]],"~$generate-reconciler",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",195,"^S",7,"^T",195,"^U",26,"^V",["^W",["^X",["^W",[[["^ ","^Y",["^Z","^2:"],"^10","^11"],"~$initial-state","~$parser",["^ ","^Y",["~$pathopt","~$migrate","~$shared"],"~:or",["^ ","^2?",true,"^2@",null,"^2A",null]]]]]]],"^14","The reconciler's send method calls UntangledApplication/server-send, which itself requires a reconciler with a\n  send method already defined. This creates a catch-22 / circular dependency on the reconciler and :send field within\n  the reconciler.\n\n  To resolve the issue, we def an atom pointing to the reconciler that the send method will deref each time it is\n  called. This allows us to define the reconciler with a send method that, at the time of initialization, has an app\n  that points to a nil reconciler. By the end of this function, the app's reconciler reference has been properly set."],"^9","~$untangled.client.impl.application/generate-reconciler","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",26,"^17",["^W",[["~$p__703352","^2=","^2>","~$p__703353"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",195,"^T",195,"^1;",4,"^1<",true,"^V",["^W",["^X",["^W",[[["^ ","^Y",["^Z","^2:"],"^10","^11"],"^2=","^2>",["^ ","^Y",["^2?","^2@","^2A"],"^2B",["^ ","^2?",true,"^2@",null,"^2A",null]]]]]]],"^14","The reconciler's send method calls UntangledApplication/server-send, which itself requires a reconciler with a\n  send method already defined. This creates a catch-22 / circular dependency on the reconciler and :send field within\n  the reconciler.\n\n  To resolve the issue, we def an atom pointing to the reconciler that the send method will deref each time it is\n  called. This allows us to define the reconciler with a send method that, at the time of initialization, has an app\n  that points to a nil reconciler. By the end of this function, the app's reconciler reference has been properly set."],"~$detect-errant-remotes",["^ ","^O",null,"^P",["^ ","^Q","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/application.cljc","^R",83,"^S",7,"^T",83,"^U",28,"^V",["^W",["^X",["^W",[[["^ ","^Y",["^1H","^Z"],"^10","^11"]]]]]]],"^9","~$untangled.client.impl.application/detect-errant-remotes","^16",false,"^Q","resources/public/js/guide/untangled/client/impl/application.cljc","^U",28,"^17",["^W",[["~$p__702732"]]],"^19",null,"^1:",["^W",[null,null]],"^S",1,"^R",83,"^T",83,"^1;",1,"^1<",true,"^V",["^W",["^X",["^W",[[["^ ","^Y",["^1H","^Z"],"^10","^11"]]]]]]]],"~:require-macros",["^ ","^6","^6","^J","^K","^K","^K"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:tempids","~:pathopt","~:networking","~:mutation-merge","~:else","~:locale","~:remotes","~:response-channels","~:migrate","~:load-descriptors","~:reconciler","~:on-load","~:ui/locale","~:recur","~:state","~:global-error-callback","~:parser","~:untangled/server-error","~:send-queues","~:send","~:shared","~:merge-tree","~:complete","~:on-error","~:untangled.client.impl.om-plumbing/not-found","~:query","~:normalize","~:untangled/ready-to-load"]],"~:order",["^2V","^31","^2Y","^2P","^32","^2N","^39","^2W","^37","^2U","^3;","^2S","^36","^2Q","^38","^2L","^2O","^2M","^2T","^34","^2X","^2R","^2Z","^30","^33","^35","^3:","^2["]],"^14",null]
["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$prewalk","~$clojure.walk"],"~:excludes",["~#set",[]],"~:name","~$untangled.client.impl.data-fetch","~:imports",null,"~:requires",["^ ","~$uuid","~$cljs-uuid-utils.core","~$set","~$clojure.set","~$log","~$untangled.client.logging","^>","^>","~$plumbing","~$untangled.client.impl.om-plumbing","~$om.next.impl.parser","^E","~$omp","~$om.next.protocols","~$udom","~$untangled.dom","^@","^@","~$m","~$untangled.client.mutations","~$util","~$om.util","^G","^G","^J","^J","~$op","^E","^B","^B","~$om","~$om.next","^D","^D","^O","^O","^I","^I","^6","^6","^L","^L"],"~:uses",["^ ","^5","^6"],"~:defs",["^ ","~$set-failed!",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","~:line",334,"~:column",9,"~:end-line",334,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^[",[["~$state"],["^11","~$params"]]]]],"~:doc","Returns a marker (based on the input state) that is in the error state","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",2,"~:method-params",["^[",[["^11"],["^11","^12"]]],"^Z",["^[",[["^11"],["^11","^12"]]],"~:arglists-meta",["^[",[null,null]]]],"^9","~$untangled.client.impl.data-fetch/set-failed!","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",20,"^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^11"],["^11","^12"]]],"^Z",["^[",[["^11"],["^11","^12"]]],"^18",["^[",[null,null]]],"^17",["^[",[["^11"],["^11","^12"]]],"~:protocol-impl",null,"^18",["^[",[null,null]],"^W",3,"^V",334,"^X",334,"^16",2,"~:fn-var",true,"^Z",["^[",[["^11"],["^11","^12"]]],"^13","Returns a marker (based on the input state) that is in the error state"],"~$data-target",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",267,"^W",7,"^X",267,"^Y",18,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."],"^9","~$untangled.client.impl.data-fetch/data-target","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",18,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",267,"^X",267,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."],"~$mark-parallel-loading",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",52,"^W",7,"^X",52,"^Y",28,"^Z",["^[",["^10",["^[",[["~$remote-name","~$reconciler"]]]]],"^13","Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."],"^9","~$untangled.client.impl.data-fetch/mark-parallel-loading","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",28,"^17",["^[",[["^1?","^1@"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",52,"^X",52,"^16",2,"^1;",true,"^Z",["^[",["^10",["^[",[["^1?","^1@"]]]]],"^13","Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."],"~$failed?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",36,"^W",9,"^X",36,"^Y",16,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given item is a data state marker in the failed state"],"^9","~$untangled.client.impl.data-fetch/failed?","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",16,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",3,"^V",36,"^X",36,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given item is a data state marker in the failed state"],"~$split-items-ready-to-load",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",109,"^W",7,"^X",109,"^Y",32,"^Z",["^[",["^10",["^[",[["~$items-ready-to-load"]]]]],"^13","This function is used to split accidental colliding queries into separate network\n  requests. The most general description of this issue is\n  from two unrelated `load` calls when black-box composing functions. The two\n  separate queries: One issues `[{:entitlements [:foo]}]`, and the other\n  asks for `[{:entitlements [:bar]}]`. Untangled merges these into a single query\n  [{:entitlements [:foo]} {:entitlements [:bar]}]. However, the response to a query\n  is a map, and such a query would result in the backend parser being called twice (once per key in the subquery)\n  but one would stomp on the other. Thus, this function ensures such accidental collisions are\n  not combined into a single network request."],"^9","~$untangled.client.impl.data-fetch/split-items-ready-to-load","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",32,"^17",["^[",[["^1E"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",109,"^X",109,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1E"]]]]],"^13","This function is used to split accidental colliding queries into separate network\n  requests. The most general description of this issue is\n  from two unrelated `load` calls when black-box composing functions. The two\n  separate queries: One issues `[{:entitlements [:foo]}]`, and the other\n  asks for `[{:entitlements [:bar]}]`. Untangled merges these into a single query\n  [{:entitlements [:foo]} {:entitlements [:bar]}]. However, the response to a query\n  is a map, and such a query would result in the backend parser being called twice (once per key in the subquery)\n  but one would stomp on the other. Thus, this function ensures such accidental collisions are\n  not combined into a single network request."],"~$data-state?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",22,"^W",7,"^X",22,"^Y",18,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given bit of state is a data fetch state-tracking marker"],"^9","~$untangled.client.impl.data-fetch/data-state?","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",18,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",22,"^X",22,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given bit of state is a data fetch state-tracking marker"],"~$ready?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",30,"^W",9,"^X",30,"^Y",15,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given item is a data state marker that is in the ready state"],"^9","~$untangled.client.impl.data-fetch/ready?","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",15,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",3,"^V",30,"^X",30,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given item is a data state marker that is in the ready state"],"~$ready-state",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",228,"^W",7,"^X",228,"^Y",18,"^Z",["^[",["^10",["^[",[[["^ ","~:keys",["~$ident","~$field","^12","~$remote","~$without","~$query","~$post-mutation","~$post-mutation-params","~$fallback","~$parallel","~$refresh","~$marker","~$target"],"~:or",["^ ","^1O","~:remote","^1P",["^8",[]],"^1V",[],"^1W",true]]]]]]],"^13","Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging."],"^9","~$untangled.client.impl.data-fetch/ready-state","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",18,"^17",["^[",[["~$p__701965"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",228,"^X",228,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[[["^ ","^1L",["^1M","^1N","^12","^1O","^1P","^1Q","^1R","^1S","^1T","^1U","^1V","^1W","^1X"],"^1Y",["^ ","^1O","^1Z","^1P",["^8",[]],"^1V",[],"^1W",true]]]]]]],"^13","Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging."],"~$set-loading!",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",329,"^W",9,"^X",329,"^Y",21,"^Z",["^[",["^10",["^[",[["^11"],["^11","^12"]]]]],"^13","Returns a marker (based on the input state) that is in the loading state (and ensures that it has a UUID)","^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^11"],["^11","^12"]]],"^Z",["^[",[["^11"],["^11","^12"]]],"^18",["^[",[null,null]]]],"^9","~$untangled.client.impl.data-fetch/set-loading!","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",21,"^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^11"],["^11","^12"]]],"^Z",["^[",[["^11"],["^11","^12"]]],"^18",["^[",[null,null]]],"^17",["^[",[["^11"],["^11","^12"]]],"^1:",null,"^18",["^[",[null,null]],"^W",3,"^V",329,"^X",329,"^16",2,"^1;",true,"^Z",["^[",[["^11"],["^11","^12"]]],"^13","Returns a marker (based on the input state) that is in the loading state (and ensures that it has a UUID)"],"~$elide-ast-nodes",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",192,"^W",7,"^X",192,"^Y",22,"^Z",["^[",["^10",["^[",[[["^ ","^1L",["~$key","~$union-key","~$children"],"~:as","~$ast"],"~$elision-set"]]]]],"^13","Remove items from a query (AST) that have a key listed in the elision-set"],"^9","~$untangled.client.impl.data-fetch/elide-ast-nodes","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",22,"^17",["^[",[["~$p__701938","^29"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",192,"^X",192,"^16",2,"^1;",true,"^Z",["^[",["^10",["^[",[[["^ ","^1L",["^24","^25","^26"],"^27","^28"],"^29"]]]]],"^13","Remove items from a query (AST) that have a key listed in the elision-set"],"~$data-marker?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",287,"^W",7,"^X",287,"^Y",19,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the user desires a copy of the state marker to appear in the app state at the data path of the target data."],"^9","~$untangled.client.impl.data-fetch/data-marker?","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",19,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",287,"^X",287,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the user desires a copy of the state marker to appear in the app state at the data path of the target data."],"~$data-path",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",304,"^W",7,"^X",304,"^Y",16,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the app-state database path of the target of the load that the given data state marker is trying to load."],"^9","~$untangled.client.impl.data-fetch/data-path","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",16,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",304,"^X",304,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the app-state database path of the target of the load that the given data state marker is trying to load."],"~$relocate-targeted-results",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",350,"^W",7,"^X",350,"^Y",32,"^Z",["^[",["^10",["^[",[["~$state-atom","~$items"]]]]],"^13","For items that are manually targeted, move them in app state from their result location to their target location."],"^9","~$untangled.client.impl.data-fetch/relocate-targeted-results","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",32,"^17",["^[",[["^2A","^2B"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",350,"^X",350,"^16",2,"^1;",true,"^Z",["^[",["^10",["^[",[["^2A","^2B"]]]]],"^13","For items that are manually targeted, move them in app state from their result location to their target location."],"~$inject-query-params",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",202,"^W",7,"^X",202,"^Y",26,"^Z",["^[",["^10",["^[",[["^28","^12"]]]]],"^13","Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  "],"^9","~$untangled.client.impl.data-fetch/inject-query-params","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",26,"^17",["^[",[["^28","^12"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",202,"^X",202,"^16",2,"^1;",true,"^Z",["^[",["^10",["^[",[["^28","^12"]]]]],"^13","Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  "],"~$mark-loading",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",130,"^W",7,"^X",130,"^Y",19,"^Z",["^[",["^10",["^[",[["^1O","^1@"]]]]],"^13","Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."],"^9","~$untangled.client.impl.data-fetch/mark-loading","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",19,"^17",["^[",[["^1O","^1@"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",130,"^X",130,"^16",2,"^1;",true,"^Z",["^[",["^10",["^[",[["^1O","^1@"]]]]],"^13","Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."],"~$dedupe-by",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",82,"^W",7,"^X",82,"^Y",16,"^Z",["^[",["^10",["^[",[["~$keys-fn"],["^2I","~$coll"]]]]],"^13","Returns a lazy sequence of the elements of coll with dupes removed.\n   An element is a duplicate IFF (keys-fn element) has key collision with any prior element\n   to come before it. E.g. (dedupe-by identity [[:a] [:b] [:a] [:a :c]]) => [[:a] [:b]]\n   Returns a stateful transducer when no collection is provided.","^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^2I"],["^2I","^2J"]]],"^Z",["^[",[["^2I"],["^2I","^2J"]]],"^18",["^[",[null,null]]]],"^9","~$untangled.client.impl.data-fetch/dedupe-by","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",16,"^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^2I"],["^2I","^2J"]]],"^Z",["^[",[["^2I"],["^2I","^2J"]]],"^18",["^[",[null,null]]],"^17",["^[",[["^2I"],["^2I","^2J"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",82,"^X",82,"^16",2,"^1;",true,"^Z",["^[",[["^2I"],["^2I","^2J"]]],"^13","Returns a lazy sequence of the elements of coll with dupes removed.\n   An element is a duplicate IFF (keys-fn element) has key collision with any prior element\n   to come before it. E.g. (dedupe-by identity [[:a] [:b] [:a] [:a :c]]) => [[:a] [:b]]\n   Returns a stateful transducer when no collection is provided."],"~$error-callback",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",409,"^W",8,"^X",409,"^Y",22,"~:private",true,"^Z",["^[",["^10",["^[",[["^1@"]]]]],"^13","Generates a callback that is used whenever a hard server error occurs (status code 400+ or network error).\n\n  The generated callback:\n\n  - Replaces affected loading markers with error markers (if :marker is true on the load item)\n  - Runs fallbacks associated with the loads\n  - Sets the global error marker (:untangled/server-error)\n  - Refreshes UI\n  "],"^2M",true,"^9","~$untangled.client.impl.data-fetch/error-callback","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",22,"^17",["^[",[["^1@"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",409,"^X",409,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1@"]]]]],"^13","Generates a callback that is used whenever a hard server error occurs (status code 400+ or network error).\n\n  The generated callback:\n\n  - Replaces affected loading markers with error markers (if :marker is true on the load item)\n  - Runs fallbacks associated with the loads\n  - Sets the global error marker (:untangled/server-error)\n  - Refreshes UI\n  "],"~$loading?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",33,"^W",9,"^X",33,"^Y",17,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given item is a data state marker in the loading state"],"^9","~$untangled.client.impl.data-fetch/loading?","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",17,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",3,"^V",33,"^X",33,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Test if the given item is a data state marker in the loading state"],"~$data-field",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",281,"^W",7,"^X",281,"^Y",17,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the target field (if any) from the data state marker"],"^9","~$untangled.client.impl.data-fetch/data-field","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",17,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",281,"^X",281,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the target field (if any) from the data state marker"],"~$data-remote",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",293,"^W",7,"^X",293,"^Y",18,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the remote that this marker is meant to talk to"],"^9","~$untangled.client.impl.data-fetch/data-remote","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",18,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",293,"^X",293,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the remote that this marker is meant to talk to"],"~$data-exclusions",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",317,"^W",7,"^X",317,"^Y",22,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the keywords that should be (recursively) removed from the query that will be sent to the server."],"^9","~$untangled.client.impl.data-fetch/data-exclusions","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",22,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",317,"^X",317,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the keywords that should be (recursively) removed from the query that will be sent to the server."],"~$data-refresh",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",290,"^W",7,"^X",290,"^Y",19,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the list of query keywords that should be refreshed (re-rendered) when this load completes."],"^9","~$untangled.client.impl.data-fetch/data-refresh","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",19,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",290,"^X",290,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the list of query keywords that should be refreshed (re-rendered) when this load completes."],"~$mark-ready",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",259,"^W",7,"^X",259,"^Y",17,"^Z",["^[",["^10",["^[",[[["^ ","^1L",["^11"],"^27","~$config"]]]]]],"^13","Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See the `load-data` and `load-field` functions in `untangled.client.data-fetch` for the public API."],"^9","~$untangled.client.impl.data-fetch/mark-ready","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",17,"^17",["^[",[["~$p__701996"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",259,"^X",259,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[[["^ ","^1L",["^11"],"^27","^2Z"]]]]]],"^13","Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See the `load-data` and `load-field` functions in `untangled.client.data-fetch` for the public API."],"~$data-query-key",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",296,"^W",7,"^X",296,"^Y",21,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the 'primary' query key of the data fetch. This is defined as the first keyword of the overall query (which might\n  be a simple prop or join key for example)"],"^9","~$untangled.client.impl.data-fetch/data-query-key","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",21,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",296,"^X",296,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the 'primary' query key of the data fetch. This is defined as the first keyword of the overall query (which might\n  be a simple prop or join key for example)"],"~$make-data-state",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",169,"^W",7,"^X",169,"^Y",22,"^Z",["^[",["^10",["^[",[["~$type"],["^34","^12"]]]]],"^13","This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed.","^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^34"],["^34","^12"]]],"^Z",["^[",[["^34"],["^34","^12"]]],"^18",["^[",[null,null]]]],"^9","~$untangled.client.impl.data-fetch/make-data-state","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",22,"^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^34"],["^34","^12"]]],"^Z",["^[",[["^34"],["^34","^12"]]],"^18",["^[",[null,null]]],"^17",["^[",[["^34"],["^34","^12"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",169,"^X",169,"^16",2,"^1;",true,"^Z",["^[",[["^34"],["^34","^12"]]],"^13","This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed."],"~$get-ready-query",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",180,"^W",7,"^X",180,"^Y",22,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the query for items that are ready to load into the given app state. Can be called any number of times\n  (side effect free)."],"^9","~$untangled.client.impl.data-fetch/get-ready-query","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",22,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",180,"^X",180,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the query for items that are ready to load into the given app state. Can be called any number of times\n  (side effect free)."],"~$data-uuid",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",284,"^W",7,"^X",284,"^Y",16,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the UUID of the data fetch"],"^9","~$untangled.client.impl.data-fetch/data-uuid","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",16,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",284,"^X",284,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the UUID of the data fetch"],"~$set-ready!",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",325,"^W",9,"^X",325,"^Y",19,"^Z",["^[",["^10",["^[",[["^11"],["^11","^12"]]]]],"^13","Returns a state (based on the input state) that is in the 'ready' to load state.","^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^11"],["^11","^12"]]],"^Z",["^[",[["^11"],["^11","^12"]]],"^18",["^[",[null,null]]]],"^9","~$untangled.client.impl.data-fetch/set-ready!","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",19,"^14",["^ ","^15",false,"^16",2,"^17",["^[",[["^11"],["^11","^12"]]],"^Z",["^[",[["^11"],["^11","^12"]]],"^18",["^[",[null,null]]],"^17",["^[",[["^11"],["^11","^12"]]],"^1:",null,"^18",["^[",[null,null]],"^W",3,"^V",325,"^X",325,"^16",2,"^1;",true,"^Z",["^[",[["^11"],["^11","^12"]]],"^13","Returns a state (based on the input state) that is in the 'ready' to load state."],"~$place-load-markers",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",40,"^W",8,"^X",40,"^Y",26,"^2M",true,"^Z",["^[",["^10",["^[",[["^2A","~$items-to-load"]]]]],"^13","Place load markers in the app state at their data paths so that UI rendering can see them."],"^2M",true,"^9","~$untangled.client.impl.data-fetch/place-load-markers","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",26,"^17",["^[",[["^2A","^3="]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",40,"^X",40,"^16",2,"^1;",true,"^Z",["^[",["^10",["^[",[["^2A","^3="]]]]],"^13","Place load markers in the app state at their data paths so that UI rendering can see them."],"~$set-global-loading",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",344,"^W",8,"^X",344,"^Y",26,"^2M",true,"^Z",["^[",["^10",["^[",[["^1@"]]]]]],"^2M",true,"^9","~$untangled.client.impl.data-fetch/set-global-loading","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",26,"^17",["^[",[["^1@"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",344,"^X",344,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1@"]]]]]],"~$loaded-callback",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",367,"^W",8,"^X",367,"^Y",23,"^2M",true,"^Z",["^[",["^10",["^[",[["^1@"]]]]],"^13","Generates a callback that processes all of the post-processing steps once a remote load has completed. This includes:\n\n  - Marking the items that were queries for but not returned as 'missing' (see documentation on mark and sweep of db)\n  - Refreshing elements of the UI that were included in the data fetch :refresh option\n  - Removing loading markers related to the executed loads that were not overwritten by incoming data\n  - Merging the incoming data into the normalized database\n  - Running post-mutations for any fetches that completed\n  - Updating the global loading marker\n  - Forcing a global re-render if post-mutations ran (may change in future versions)\n  "],"^2M",true,"^9","~$untangled.client.impl.data-fetch/loaded-callback","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",23,"^17",["^[",[["^1@"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",367,"^X",367,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1@"]]]]],"^13","Generates a callback that processes all of the post-processing steps once a remote load has completed. This includes:\n\n  - Marking the items that were queries for but not returned as 'missing' (see documentation on mark and sweep of db)\n  - Refreshing elements of the UI that were included in the data fetch :refresh option\n  - Removing loading markers related to the executed loads that were not overwritten by incoming data\n  - Merging the incoming data into the normalized database\n  - Running post-mutations for any fetches that completed\n  - Updating the global loading marker\n  - Forcing a global re-render if post-mutations ran (may change in future versions)\n  "],"~$data-ident",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",271,"^W",7,"^X",271,"^Y",17,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."],"^9","~$untangled.client.impl.data-fetch/data-ident","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",17,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",271,"^X",271,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."],"~$data-query",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",275,"^W",7,"^X",275,"^Y",17,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the query that will be sent to the server as a result of the given data state marker"],"^9","~$untangled.client.impl.data-fetch/data-query","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",17,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",275,"^X",275,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the query that will be sent to the server as a result of the given data state marker"],"~$data-params",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",313,"^W",7,"^X",313,"^Y",18,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the parameters that the user wants to add to the first join/keyword of the data fetch query."],"^9","~$untangled.client.impl.data-fetch/data-params","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",18,"^17",["^[",[["^11"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",313,"^X",313,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^13","Get the parameters that the user wants to add to the first join/keyword of the data fetch query."],"~$join-key-or-nil",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",102,"^W",7,"^X",102,"^Y",22,"^Z",["^[",["^10",["^[",[["~$expr"]]]]]],"^9","~$untangled.client.impl.data-fetch/join-key-or-nil","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",22,"^17",["^[",[["^3J"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",102,"^X",102,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^3J"]]]]]],"~$valid-types",["^ ","^9","~$untangled.client.impl.data-fetch/valid-types","^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",167,"^W",1,"^X",167,"^Y",17,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",167,"^W",6,"^X",167,"^Y",17],"~:tag","~$cljs.core/ISet"],"~$full-query",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^V",340,"^W",7,"^X",340,"^Y",17,"^Z",["^[",["^10",["^[",[["^2B"]]]]],"^13","Composes together the queries of a sequence of data states into a single query."],"^9","~$untangled.client.impl.data-fetch/full-query","^15",false,"^U","resources/public/js/guide/untangled/client/impl/data_fetch.cljc","^Y",17,"^17",["^[",[["^2B"]]],"^1:",null,"^18",["^[",[null,null]],"^W",1,"^V",340,"^X",340,"^16",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^2B"]]]]],"^13","Composes together the queries of a sequence of data states into a single query."]],"~:require-macros",["^ ","^N","^O","^O","^O","~$m","^J","^J","^J"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:ui/react-key","^1Z","~:children","~:union-key","~:untangled.client.impl.data-fetch/post-mutation","~:ready","~:untangled.client.impl.data-fetch/parallel","~:untangled.client.impl.data-fetch/marker","~:key","~:refresh","~:ui/fetch-state","~:parallel","~:fallback","~:marker","~:load-descriptors","~:on-load","~:params","~:field","~:untangled.client.impl.data-fetch/without","~:state","~:post-mutation","~:otherwise","~:untangled.client.impl.data-fetch/params","~:without","~:untangled.client.impl.data-fetch/type","~:untangled.client.impl.data-fetch/ident","~:untangled/server-error","~:loading","~:untangled.client.impl.data-fetch/post-mutation-params","~:untangled.client.impl.data-fetch/remote","~:untangled.client.impl.data-fetch/fallback","~:ident","~:dispatch-key","~:untangled.client.impl.data-fetch/query","~:untangled/force-root","~:untangled/loads-in-progress","~:post-mutation-params","~:action","~:untangled.client.impl.data-fetch/field","~:error","~:ui/loading-data","~:untangled.client.impl.data-fetch/refresh","~:target","~:on-error","~:query","~:items-to-load","~:untangled.client.impl.data-fetch/target","~:untangled.client.impl.data-fetch/uuid","~:always","~:failed","~:untangled/ready-to-load"]],"~:order",["^4@","^3Y","^4C","^4Y","^42","^4K","^4Z","^3Z","^4P","^4T","^47","^4S","^46","^4>","^4U","^40","^3W","^3V","^4H","^48","^4R","^1Z","^41","^43","^44","^45","^49","^4<","^4?","^4G","^4L","^3X","^3[","^4A","^4D","^4E","^4F","^4I","^4N","^4Q","^4V","^4W","^4;","^4=","^4:","^4X","^4M","^4J","^4B","^4O","^3U"]],"^13",null]
["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$defmutation","~$untangled.client.mutations"],"~:excludes",["~#set",[]],"~:name","~$untangled.ui.forms","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$log","~$untangled.client.logging","~$dom","~$om.dom","~$cljs.tools.reader","^C","^B","^B","~$untangled.client.core","^D","^>","^>","~$m","^6","~$util","~$om.util","^6","^6","~$clojure.tools.reader","^C","~$df","~$untangled.client.data-fetch","^@","^@","~$om","~$om.next","^K","^K","~$str","~$clojure.string","^I","^I","^M","^M","~$uc","^D","~$reader","^C","^F","^F"],"~:uses",["^ "],"~:defs",["^ ","~$reduced-if",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","~:line",664,"~:column",8,"~:end-line",664,"~:end-column",18,"~:private",true,"~:arglists",["~#list",["~$quote",["^10",[["~$p","~$x"]]]]]],"^Z",true,"^9","~$untangled.ui.forms/reduced-if","~:variadic",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",18,"~:method-params",["^10",[["~$p","~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^W",1,"^V",664,"^X",664,"~:max-fixed-arity",2,"~:fn-var",true,"^[",["^10",["^11",["^10",[["~$p","~$x"]]]]]],"~$validate-entire-form!",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",798,"^W",7,"^X",798,"^Y",28,"^[",["^10",["^11",["^10",[["~$comp-or-reconciler","~$form","~$&",["^ ","~:as","~$opts"]]]]]],"~:doc","Trigger whole-form validation as a TRANSACTION. The form will not be validated upon return of this function,\n   but the UI will update after validation is complete. If you want to test if a form is valid use validate-fields on\n   the state of the form to obtain an updated validated form. If you want to trigger validation as *part* of your\n   own transaction (so your mutation can see the validated form), you may use the underlying\n   `(f/validate-form {:form-id fident})` mutation in your own call to `transact!`.","~:top-fn",["^ ","^13",true,"^17",2,"^14",[["^10",["^1:","^1;",["^ ","^1<","^1="]]]],"^[",["^10",[["^1:","^1;","~$&",["^ ","^1<","^1="]]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/validate-entire-form!","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",28,"^1?",["^ ","^13",true,"^17",2,"^14",[["^10",["^1:","^1;",["^ ","^1<","^1="]]]],"^[",["^10",[["^1:","^1;","~$&",["^ ","^1<","^1="]]]],"^16",["^10",[null]]],"^14",[["^10",["^1:","^1;",["^ ","^1<","^1="]]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",798,"^X",798,"^17",2,"^18",true,"^[",["^10",[["^1:","^1;","~$&",["^ ","^1<","^1="]]]],"^1>","Trigger whole-form validation as a TRANSACTION. The form will not be validated upon return of this function,\n   but the UI will update after validation is complete. If you want to test if a form is valid use validate-fields on\n   the state of the form to obtain an updated validated form. If you want to trigger validation as *part* of your\n   own transaction (so your mutation can see the validated form), you may use the underlying\n   `(f/validate-form {:form-id fident})` mutation in your own call to `transact!`."],"~$initialized-state",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",494,"^W",7,"^X",494,"^Y",24,"^[",["^10",["^11",["^10",[["~$empty-form-state","~$field-keys-to-initialize","~$entity"]]]]],"^1>","INTERNAL. Get the initialized state of the form based on default state of the fields and the current entity state"],"^9","~$untangled.ui.forms/initialized-state","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",24,"^14",["^10",[["^1B","^1C","^1D"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",494,"^X",494,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^1B","^1C","^1D"]]]]],"^1>","INTERNAL. Get the initialized state of the form based on default state of the fields and the current entity state"],"~$on-form-change",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",607,"^W",7,"^X",607,"^Y",21,"^[",["^10",["^11",["^10",[["~$mut-sym"]]]]],"^1>","Declare an Untangled mutation (as a properly namespaced symbol) that will be triggered on\n  each form change. Only one such mutation can be defined for a form.\n\n  Add this to your IForm declarations:\n\n  ```\n  (defui ^:once PhoneForm\n    static uc/InitialAppState\n    (initial-state [this params] (f/build-form this (or params {})))\n    static f/IForm\n    (form-spec [this] [(f/id-field :db/id)\n                       (f/on-form-change 'some-ns/global-validate-phone-form)\n                       ...])\n  ...)\n  ```\n\n  When invoked, the target mutation params will include:\n\n  `:form-id` The ident of the form. You may use the app state in `env` to do anything you want to do (validate, etc.)\n  `:field` The name of the field that changed\n  `:kind` The kind of change:\n     `:blur` The user finished with the given field and moved away from it.\n     `:edit` The user changed the value. Text fields edits will trigger one of these per keystroke."],"^9","~$untangled.ui.forms/on-form-change","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",21,"^14",["^10",[["^1G"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",607,"^X",607,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1G"]]]]],"^1>","Declare an Untangled mutation (as a properly namespaced symbol) that will be triggered on\n  each form change. Only one such mutation can be defined for a form.\n\n  Add this to your IForm declarations:\n\n  ```\n  (defui ^:once PhoneForm\n    static uc/InitialAppState\n    (initial-state [this params] (f/build-form this (or params {})))\n    static f/IForm\n    (form-spec [this] [(f/id-field :db/id)\n                       (f/on-form-change 'some-ns/global-validate-phone-form)\n                       ...])\n  ...)\n  ```\n\n  When invoked, the target mutation params will include:\n\n  `:form-id` The ident of the form. You may use the app state in `env` to do anything you want to do (validate, etc.)\n  `:field` The name of the field that changed\n  `:kind` The kind of change:\n     `:blur` The user finished with the given field and moved away from it.\n     `:edit` The user changed the value. Text fields edits will trigger one of these per keystroke."],"~$diff-form",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",1027,"^W",7,"^X",1027,"^Y",16,"^[",["^10",["^11",["^10",[["~$root-form"]]]]],"^1>","Returns the diff between the form's current state and its original data.\n   The return value is a map where the keys are the idents of the forms that have changed,\n   and the values are vectors of the keys for the fields that changed on that form.\n\n   Return value:\n   {:form/new-entities {[:phone/by-id #phone-id] {...}}\n    :form/updates {[:phone/by-id 1] {:phone/number \"123-4567\"}}\n    :form/add-relations {[:person/by-id 1] {:person/number #{phone-id-not-ident ...}}}\n    :form/remove-relations {[:person/by-id 1] {:person/number #{4 5}}}}"],"^9","~$untangled.ui.forms/diff-form","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",16,"^14",["^10",[["^1J"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",1027,"^X",1027,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1J"]]]]],"^1>","Returns the diff between the form's current state and its original data.\n   The return value is a map where the keys are the idents of the forms that have changed,\n   and the values are vectors of the keys for the fields that changed on that form.\n\n   Return value:\n   {:form/new-entities {[:phone/by-id #phone-id] {...}}\n    :form/updates {[:phone/by-id 1] {:phone/number \"123-4567\"}}\n    :form/add-relations {[:person/by-id 1] {:person/number #{phone-id-not-ident ...}}}\n    :form/remove-relations {[:person/by-id 1] {:person/number #{4 5}}}}"],"~$id-field",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",109,"^W",7,"^X",109,"^Y",15,"^[",["^10",["^11",["^10",[["~$name"]]]]],"^1>","Declare a hidden identity field.\n   Required to read/write to/from other db tables,\n   and to make sure tempids and such follow along properly."],"^9","~$untangled.ui.forms/id-field","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",15,"^14",["^10",[["^1M"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",109,"^X",109,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1M"]]]]],"^1>","Declare a hidden identity field.\n   Required to read/write to/from other db tables,\n   and to make sure tempids and such follow along properly."],"~$initialized?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",541,"^W",7,"^X",541,"^Y",19,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Returns true if the given form is already initialized with form setup data"],"^9","~$untangled.ui.forms/initialized?","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",19,"^14",["^10",[["^1;"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",541,"^X",541,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Returns true if the given form is already initialized with form setup data"],"~$validator-args",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",714,"^W",7,"^X",714,"^Y",21,"^[",["^10",["^11",["^10",[["^1;","~$field"]]]]],"^1>","Returns the validator args from the form field\n\n  `form` The form props\n  `field` The field name"],"^9","~$untangled.ui.forms/validator-args","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",21,"^14",["^10",[["^1;","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",714,"^X",714,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Returns the validator args from the form field\n\n  `form` The form props\n  `field` The field name"],"~$css-class",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",289,"^W",7,"^X",289,"^Y",16,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Gets the css class for the form field"],"^9","~$untangled.ui.forms/css-class","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",16,"^14",["^10",[["^1;","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",289,"^X",289,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Gets the css class for the form field"],"~$render-input-field",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",841,"^W",8,"^X",841,"^Y",26,"^Z",true,"^[",["^10",["^11",["^10",[["~$component","~$htmlProps","^1;","~$field-name","~$type","~$field-value->input-value","~$input-value->field-value"]]]]]],"^Z",true,"^9","~$untangled.ui.forms/render-input-field","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",26,"^14",["^10",[["^1W","^1X","^1;","^1Y","^1Z","^1[","^20"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",841,"^X",841,"^17",7,"^18",true,"^[",["^10",["^11",["^10",[["^1W","^1X","^1;","^1Y","^1Z","^1[","^20"]]]]]],"~$reset-from-entity!",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",1080,"^W",7,"^X",1080,"^Y",25,"^[",["^10",["^11",["^10",[["^1:","^1;"]]]]],"^1>","Reset the form from a given entity in your application database using an Om transaction and update the validation state.\n   You may compose your own Om transactions and use `(f/reset-from-entity {:form-id [:entity id]})` directly."],"^9","~$untangled.ui.forms/reset-from-entity!","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",25,"^14",["^10",[["^1:","^1;"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",1080,"^X",1080,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^1:","^1;"]]]]],"^1>","Reset the form from a given entity in your application database using an Om transaction and update the validation state.\n   You may compose your own Om transactions and use `(f/reset-from-entity {:form-id [:entity id]})` directly."],"~$set-current-value",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",282,"^W",7,"^X",282,"^Y",24,"^[",["^10",["^11",["^10",[["^1;","^1R","~$value"]]]]],"^1>","Sets the current value of a field in a form, and marks it as :unchecked."],"^9","~$untangled.ui.forms/set-current-value","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",24,"^14",["^10",[["^1;","^1R","^25"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",282,"^X",282,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1R","^25"]]]]],"^1>","Sets the current value of a field in a form, and marks it as :unchecked."],"~$to-idents",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",377,"^W",8,"^X",377,"^Y",17,"^Z",true,"^[",["^10",["^11",["^10",[["~$app-state","~$current-object","~$key-path"]]]]],"^1>","Follows a key-path through the graph database started from the current object. Follows to-one and to-many joins.\n   Results in a sequence of all of the idents of the items indicated by the given key-path from the given object."],"^Z",true,"^9","~$untangled.ui.forms/to-idents","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",17,"^14",["^10",[["^28","^29","^2:"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",377,"^X",377,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^28","^29","^2:"]]]]],"^1>","Follows a key-path through the graph database started from the current object. Follows to-one and to-many joins.\n   Results in a sequence of all of the idents of the items indicated by the given key-path from the given object."],"~$field-diff",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",1018,"^W",8,"^X",1018,"^Y",18,"^Z",true,"^[",["^10",["^11",["^10",[["^1;","~$diff","^1R"]]]]]],"^Z",true,"^9","~$untangled.ui.forms/field-diff","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",18,"^14",["^10",[["^1;","^2=","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",1018,"^X",1018,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^2=","^1R"]]]]]],"~$radio-input",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",189,"^W",7,"^X",189,"^Y",18,"^[",["^10",["^11",["^10",[["^1M","~$options","~$&",["^ ","~:keys",["~$default-value","~$className"],"~:or",["^ ","^2B","~:untangled.ui.forms/none","^2C",""]]]]]]],"^1>","Declare an input that will render as some number of radio buttons.\n\n  `name` : The field name\n  `options` : A set of legal values. Can be anything that `pr-str` and `read-string` can convert to/from strings.\n\n  Radio button rendering is done via the params of `form-field`. If you declare:\n\n  ```\n  (radio-input :rating #{1 2 3 4 5})\n  ```\n\n  then in your rendering you will render the field five times:\n\n  ```\n  (dom/div nil\n    (form-field form :rating :choice 1) 1\n    (form-field form :rating :choice 2) 2\n    (form-field form :rating :choice 3) 3\n    (form-field form :rating :choice 4) 4\n    (form-field form :rating :choice 5) 5)\n  ```\n  ","^1?",["^ ","^13",true,"^17",2,"^14",[["^10",["^1M","^2@",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]],"^[",["^10",[["^1M","^2@","~$&",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/radio-input","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",18,"^1?",["^ ","^13",true,"^17",2,"^14",[["^10",["^1M","^2@",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]],"^[",["^10",[["^1M","^2@","~$&",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]],"^16",["^10",[null]]],"^14",[["^10",["^1M","^2@",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",189,"^X",189,"^17",2,"^18",true,"^[",["^10",[["^1M","^2@","~$&",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]],"^1>","Declare an input that will render as some number of radio buttons.\n\n  `name` : The field name\n  `options` : A set of legal values. Can be anything that `pr-str` and `read-string` can convert to/from strings.\n\n  Radio button rendering is done via the params of `form-field`. If you declare:\n\n  ```\n  (radio-input :rating #{1 2 3 4 5})\n  ```\n\n  then in your rendering you will render the field five times:\n\n  ```\n  (dom/div nil\n    (form-field form :rating :choice 1) 1\n    (form-field form :rating :choice 2) 2\n    (form-field form :rating :choice 3) 3\n    (form-field form :rating :choice 4) 4\n    (form-field form :rating :choice 5) 5)\n  ```\n  "],"~$update-forms",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",415,"^W",7,"^X",415,"^Y",19,"^[",["^10",["^11",["^10",[["^28","^1;","~$form-update-fn"]]]]],"^1>","Similar to update-in, but walks your form declaration to affect all (initialized and preset) nested forms.\n  Useful for applying validation or some mutation to all forms. Returns the new app-state. You supply a\n  `form-update-fn` of type (fn [{:keys [ident class form]}] => form), where:\n   * `:class` is the component that has the form,\n   * `:ident` is of the form in app state,\n   * `:form`  is the value of the form in app state."],"^9","~$untangled.ui.forms/update-forms","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",19,"^14",["^10",[["^28","^1;","^2H"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",415,"^X",415,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^28","^1;","^2H"]]]]],"^1>","Similar to update-in, but walks your form declaration to affect all (initialized and preset) nested forms.\n  Useful for applying validation or some mutation to all forms. Returns the new app-state. You supply a\n  `form-update-fn` of type (fn [{:keys [ident class form]}] => form), where:\n   * `:class` is the component that has the form,\n   * `:ident` is of the form in app state,\n   * `:form`  is the value of the form in app state."],"~$form-reduce",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",460,"^W",7,"^X",460,"^Y",18,"^[",["^10",["^11",["^10",[["^1;","~$init","~$F"],["^1;","~$xf","^2K","~$F"]]]]],"^1>","Reduces over a `form` acquired via `om/props` on a component,\n   at each step calls `F` with each form.\n   `init` is the initial value for the reduce.\n\n   Optionally takes a transducing function\n   as an extra second argument & therefore calls transduce.","^1?",["^ ","^13",false,"^17",4,"^14",["^10",[["^1;","^2K","~$F"],["^1;","^2L","^2K","~$F"]]],"^[",["^10",[["^1;","^2K","~$F"],["^1;","^2L","^2K","~$F"]]],"^16",["^10",[null,null]]]],"^9","~$untangled.ui.forms/form-reduce","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",18,"^1?",["^ ","^13",false,"^17",4,"^14",["^10",[["^1;","^2K","~$F"],["^1;","^2L","^2K","~$F"]]],"^[",["^10",[["^1;","^2K","~$F"],["^1;","^2L","^2K","~$F"]]],"^16",["^10",[null,null]]],"^14",["^10",[["^1;","^2K","~$F"],["^1;","^2L","^2K","~$F"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",460,"^X",460,"^17",4,"^18",true,"^[",["^10",[["^1;","^2K","~$F"],["^1;","^2L","^2K","~$F"]]],"^1>","Reduces over a `form` acquired via `om/props` on a component,\n   at each step calls `F` with each form.\n   `init` is the initial value for the reduce.\n\n   Optionally takes a transducing function\n   as an extra second argument & therefore calls transduce."],"~$textarea-input",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",145,"^W",7,"^X",145,"^Y",21,"^[",["^10",["^11",["^10",[["^1M","~$&","^2@"]]]]],"^1>","Declare a text area on a form. See text-input for additional options.\n\n  When rendering a text input, the params passed to the field render will be merged\n  with the textarea HTML props.","^1?",["^ ","^13",true,"^17",1,"^14",[["^10",["^1M","^2@"]]],"^[",["^10",[["^1M","~$&","^2@"]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/textarea-input","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",21,"^1?",["^ ","^13",true,"^17",1,"^14",[["^10",["^1M","^2@"]]],"^[",["^10",[["^1M","~$&","^2@"]]],"^16",["^10",[null]]],"^14",[["^10",["^1M","^2@"]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",145,"^X",145,"^17",1,"^18",true,"^[",["^10",[["^1M","~$&","^2@"]]],"^1>","Declare a text area on a form. See text-input for additional options.\n\n  When rendering a text input, the params passed to the field render will be merged\n  with the textarea HTML props."],"~$fail!",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",16,"^W",7,"^X",16,"^Y",12,"^[",["^10",["^11",["^10",[["~$msg"],["~$obj","^2Q","~$ex-data"],["^2Q","^2S"]]]]],"^1?",["^ ","^13",false,"^17",3,"^14",["^10",[["^2Q"],["^2R","^2Q","^2S"],["^2Q","^2S"]]],"^[",["^10",[["^2Q"],["^2R","^2Q","^2S"],["^2Q","^2S"]]],"^16",["^10",[null,null,null]]]],"^9","~$untangled.ui.forms/fail!","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",12,"^1?",["^ ","^13",false,"^17",3,"^14",["^10",[["^2Q"],["^2R","^2Q","^2S"],["^2Q","^2S"]]],"^[",["^10",[["^2Q"],["^2R","^2Q","^2S"],["^2Q","^2S"]]],"^16",["^10",[null,null,null]]],"^14",["^10",[["^2Q"],["^2R","^2Q","^2S"],["^2Q","^2S"]]],"^15",null,"^16",["^10",[null,null,null]],"^W",1,"^V",16,"^X",16,"^17",3,"^18",true,"^[",["^10",[["^2Q"],["^2R","^2Q","^2S"],["^2Q","^2S"]]]],"~$integer-input",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",138,"^W",7,"^X",138,"^Y",20,"^[",["^10",["^11",["^10",[["^1M","~$&","^2@"]]]]],"^1>","Declare an integer input on a form. See text-input for additional options.","^1?",["^ ","^13",true,"^17",1,"^14",[["^10",["^1M","^2@"]]],"^[",["^10",[["^1M","~$&","^2@"]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/integer-input","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",20,"^1?",["^ ","^13",true,"^17",1,"^14",[["^10",["^1M","^2@"]]],"^[",["^10",[["^1M","~$&","^2@"]]],"^16",["^10",[null]]],"^14",[["^10",["^1M","^2@"]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",138,"^X",138,"^17",1,"^18",true,"^[",["^10",[["^1M","~$&","^2@"]]],"^1>","Declare an integer input on a form. See text-input for additional options."],"~$init-form*",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",575,"^W",8,"^X",575,"^Y",18,"^Z",true,"^[",["^10",["^11",["^10",[["^28","~$form-class","~$form-ident","~$forms-visited"]]]]]],"^Z",true,"^9","~$untangled.ui.forms/init-form*","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",18,"^14",["^10",[["^28","^2X","^2Y","^2Z"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",575,"^X",575,"^17",4,"^18",true,"^[",["^10",["^11",["^10",[["^28","^2X","^2Y","^2Z"]]]]]],"~$validatable-fields",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",316,"^W",7,"^X",316,"^Y",25,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Get all of the names of the validatable fields that are defined on the (initialized) form."],"^9","~$untangled.ui.forms/validatable-fields","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",25,"^14",["^10",[["^1;"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",316,"^X",316,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Get all of the names of the validatable fields that are defined on the (initialized) form."],"~$all-forms",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",446,"^W",8,"^X",446,"^Y",17,"^Z",true,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Returns a sequence of all the forms under a given `form`"],"^Z",true,"^9","~$untangled.ui.forms/all-forms","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",17,"^14",["^10",[["^1;"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",446,"^X",446,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Returns a sequence of all the forms under a given `form`"],"~$reduce-forms",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",432,"^W",7,"^X",432,"^Y",19,"^[",["^10",["^11",["^10",[["^28","^1;","~$starting-value","~$form-fn"]]]]],"^1>","Similar to reduce, but walks the forms.\n   Useful for gathering information from nested forms (eg: are all of them valid?).\n   At each form it calls (form-fn accumulator {:keys [ident form class]}).\n   The first visit will use `starting-value` as the initial accumulator,\n   and the return value of form-fn will become the new accumulator.\n\n   Returns the final accumulator value."],"^9","~$untangled.ui.forms/reduce-forms","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",19,"^14",["^10",[["^28","^1;","^35","^36"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",432,"^X",432,"^17",4,"^18",true,"^[",["^10",["^11",["^10",[["^28","^1;","^35","^36"]]]]],"^1>","Similar to reduce, but walks the forms.\n   Useful for gathering information from nested forms (eg: are all of them valid?).\n   At each form it calls (form-fn accumulator {:keys [ident form class]}).\n   The first visit will use `starting-value` as the initial accumulator,\n   and the return value of form-fn will become the new accumulator.\n\n   Returns the final accumulator value."],"~$is-subform?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",251,"^W",7,"^X",251,"^Y",18,"^[",["^10",["^11",["^10",[["~$element"],["^1;","~$field-key"]]]]],"^1>","Returns whether the element, or the field-key in the form, is a subform.","^1?",["^ ","^13",false,"^17",2,"^14",["^10",[["^39"],["^1;","^3:"]]],"^[",["^10",[["^39"],["^1;","^3:"]]],"^16",["^10",[null,null]]]],"^9","~$untangled.ui.forms/is-subform?","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",18,"^1?",["^ ","^13",false,"^17",2,"^14",["^10",[["^39"],["^1;","^3:"]]],"^[",["^10",[["^39"],["^1;","^3:"]]],"^16",["^10",[null,null]]],"^14",["^10",[["^39"],["^1;","^3:"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",251,"^X",251,"^17",2,"^18",true,"^[",["^10",[["^39"],["^1;","^3:"]]],"^1>","Returns whether the element, or the field-key in the form, is a subform."],"~$form-field-valid?",["^ ","^9","~$untangled.ui.forms/form-field-valid?","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",727,"^W",1,"^X",727,"^Y",28,"^1>","Extensible form field validation. Triggered by symbols. Arguments (args) are declared on the fields themselves.","^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",727,"^W",11,"^X",727,"^Y",28,"^1>","Extensible form field validation. Triggered by symbols. Arguments (args) are declared on the fields themselves."],"~:tag","~$cljs.core/MultiFn"],"~$get-form-spec",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",53,"^W",8,"^X",53,"^Y",21,"^Z",true,"^[",["^10",["^11",["^10",[["~$this"]]]]],"^1>","Returns a map with:\n   * :elements - contains user level fields\n   * :form - contains internal form details"],"^Z",true,"^9","~$untangled.ui.forms/get-form-spec","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",21,"^14",["^10",[["^3A"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",53,"^X",53,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^3A"]]]]],"^1>","Returns a map with:\n   * :elements - contains user level fields\n   * :form - contains internal form details"],"~$gen-tempid",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",1000,"^W",4,"^X",1000,"^Y",14,"~:protocol","~$untangled.ui.forms/DBAdapter","^1>","Generates a db tempid.","^[",["^10",["^11",["^10",[["^3A"]]]]]],"^3D","^3E","^9","~$untangled.ui.forms/gen-tempid","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",14,"^14",["^10",[["^3A"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",992,"^X",1000,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^3A"]]]]],"^1>","Generates a db tempid."],"~$checkbox-input",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",154,"^W",7,"^X",154,"^Y",21,"^[",["^10",["^11",["^10",[["^1M","~$&",["^ ","^2A",["^2C","^2B"],"^2D",["^ ","^2B",false]]]]]]],"^1>","Declare a checkbox on a form","^1?",["^ ","^13",true,"^17",1,"^14",[["^10",["^1M",["^ ","^2A",["^2C","^2B"],"^2D",["^ ","^2B",false]]]]],"^[",["^10",[["^1M","~$&",["^ ","^2A",["^2C","^2B"],"^2D",["^ ","^2B",false]]]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/checkbox-input","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",21,"^1?",["^ ","^13",true,"^17",1,"^14",[["^10",["^1M",["^ ","^2A",["^2C","^2B"],"^2D",["^ ","^2B",false]]]]],"^[",["^10",[["^1M","~$&",["^ ","^2A",["^2C","^2B"],"^2D",["^ ","^2B",false]]]]],"^16",["^10",[null]]],"^14",[["^10",["^1M",["^ ","^2A",["^2C","^2B"],"^2D",["^ ","^2B",false]]]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",154,"^X",154,"^17",1,"^18",true,"^[",["^10",[["^1M","~$&",["^ ","^2A",["^2C","^2B"],"^2D",["^ ","^2B",false]]]]],"^1>","Declare a checkbox on a form"],"~$form-component",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",227,"^W",7,"^X",227,"^Y",21,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Get the UI component that declared the given form."],"^9","~$untangled.ui.forms/form-component","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",21,"^14",["^10",[["^1;"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",227,"^X",227,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Get the UI component that declared the given form."],"~$form-field*",["^ ","^9","~$untangled.ui.forms/form-field*","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",828,"^W",1,"^X",828,"^Y",22,"^1>","Multimethod for rendering field types. Dispatches on field :input/type.","^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",828,"^W",11,"^X",828,"^Y",22,"^1>","Multimethod for rendering field types. Dispatches on field :input/type."],"^3>","^3?"],"~$current-value",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",269,"^W",7,"^X",269,"^Y",20,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Gets the current value of a field in a form."],"^9","~$untangled.ui.forms/current-value","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",20,"^14",["^10",[["^1;","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",269,"^X",269,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Gets the current value of a field in a form."],"~$placeholder",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",243,"^W",7,"^X",243,"^Y",18,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Returns the current value of the placeholder, which may be a lambda or a string."],"^9","~$untangled.ui.forms/placeholder","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",18,"^14",["^10",[["^1;","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",243,"^X",243,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Returns the current value of the placeholder, which may be a lambda or a string."],"~$valid?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",686,"^W",7,"^X",686,"^Y",13,"^[",["^10",["^11",["^10",[["^1J"],["^1;","^1R"]]]]],"^1>","Returns true iff the form or field has been validated, and the validation is ok.\n\n   Please make sure you've read and understood the form state lifecycle with respect to validation.\n\n   SEE ALSO `would-be-valid?` if you'd like to pretend that full-form validation has been run\n   in a query-only sort of way.\n\n   `root-form` is the props of a top-level form. Evaluates form recursively.\n   `form` is the props of a specific form\n   `field` is a field to check on a specific form","^1?",["^ ","^13",false,"^17",2,"^14",["^10",[["^1J"],["^1;","^1R"]]],"^[",["^10",[["^1J"],["^1;","^1R"]]],"^16",["^10",[null,null]]]],"^9","~$untangled.ui.forms/valid?","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",13,"^1?",["^ ","^13",false,"^17",2,"^14",["^10",[["^1J"],["^1;","^1R"]]],"^[",["^10",[["^1J"],["^1;","^1R"]]],"^16",["^10",[null,null]]],"^14",["^10",[["^1J"],["^1;","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",686,"^X",686,"^17",2,"^18",true,"^[",["^10",[["^1J"],["^1;","^1R"]]],"^1>","Returns true iff the form or field has been validated, and the validation is ok.\n\n   Please make sure you've read and understood the form state lifecycle with respect to validation.\n\n   SEE ALSO `would-be-valid?` if you'd like to pretend that full-form validation has been run\n   in a query-only sort of way.\n\n   `root-form` is the props of a top-level form. Evaluates form recursively.\n   `form` is the props of a specific form\n   `field` is a field to check on a specific form"],"~$field-type",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",239,"^W",7,"^X",239,"^Y",17,"^[",["^10",["^11",["^10",[["^1;","^1M"]]]]],"^1>","Get the configuration for the given field in the form."],"^9","~$untangled.ui.forms/field-type","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",17,"^14",["^10",[["^1;","^1M"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",239,"^X",239,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1M"]]]]],"^1>","Get the configuration for the given field in the form."],"~$?normalize",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",303,"^W",8,"^X",303,"^Y",18,"^Z",true,"^[",["^10",["^11",["^10",[[["^ ","^2A",["~$input/cardinality"]],"~$x"]]]]]],"^Z",true,"^9","~$untangled.ui.forms/?normalize","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",18,"^14",["^10",[["~$p__704798","~$x"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",303,"^X",303,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[[["^ ","^2A",["^3V"]],"~$x"]]]]]],"~$commit!",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",993,"^W",4,"^X",993,"^Y",11,"^3D","^3E","^1>","Entry point for creating (& executing) a transaction,\n     given params with the same shape as what diff-form returns.\n     Example code for using `DBAdapter/commit!`:\n     (defmethod your-mutate `forms/commit-to-entity [env k params]\n       (commit! (:adapter env) params))","^[",["^10",["^11",["^10",[["^3A","~$params"]]]]]],"^3D","^3E","^9","~$untangled.ui.forms/commit!","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",11,"^14",["^10",[["^3A","^3Z"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",992,"^X",993,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^3A","^3Z"]]]]],"^1>","Entry point for creating (& executing) a transaction,\n     given params with the same shape as what diff-form returns.\n     Example code for using `DBAdapter/commit!`:\n     (defmethod your-mutate `forms/commit-to-entity [env k params]\n       (commit! (:adapter env) params))"],"~$commit-to-entity!",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",1089,"^W",7,"^X",1089,"^Y",24,"^[",["^10",["^11",["^10",[["^1W","~$&",["^ ","^2A",["~$remote","~$rerender"],"^2D",["^ ","^41",false]]]]]]],"^1>","Copy the given form state into the given entity. If remote is supplied, then it will optimistically update the app\n   database and also post the entity to the server.\n\n   IMPORTANT: This function checks the validity of the form. If it is invalid, it will NOT commit the changes, but will\n   instead trigger an update of the form in the UI to show validation errors.\n\n   For remotes to work you must implement `(f/commit-to-entity {:form-id [:id id] :value {...})`\n   on the server. ","^1?",["^ ","^13",true,"^17",1,"^14",[["^10",["^1W",["^ ","^2A",["^41","^42"],"^2D",["^ ","^41",false]]]]],"^[",["^10",[["^1W","~$&",["^ ","^2A",["^41","^42"],"^2D",["^ ","^41",false]]]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/commit-to-entity!","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",24,"^1?",["^ ","^13",true,"^17",1,"^14",[["^10",["^1W",["^ ","^2A",["^41","^42"],"^2D",["^ ","^41",false]]]]],"^[",["^10",[["^1W","~$&",["^ ","^2A",["^41","^42"],"^2D",["^ ","^41",false]]]]],"^16",["^10",[null]]],"^14",[["^10",["^1W",["^ ","^2A",["^41","^42"],"^2D",["^ ","^41",false]]]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",1089,"^X",1089,"^17",1,"^18",true,"^[",["^10",[["^1W","~$&",["^ ","^2A",["^41","^42"],"^2D",["^ ","^41",false]]]]],"^1>","Copy the given form state into the given entity. If remote is supplied, then it will optimistically update the app\n   database and also post the entity to the server.\n\n   IMPORTANT: This function checks the validity of the form. If it is invalid, it will NOT commit the changes, but will\n   instead trigger an update of the form in the UI to show validation errors.\n\n   For remotes to work you must implement `(f/commit-to-entity {:form-id [:id id] :value {...})`\n   on the server. "],"~$is-ui-query-fragment?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",258,"^W",8,"^X",258,"^Y",29,"^Z",true,"^[",["^10",["^11",["^10",[["~$kw"]]]]],"^1>","TODO: Maybe make it public & access it from untangled-client ?"],"^Z",true,"^9","~$untangled.ui.forms/is-ui-query-fragment?","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",29,"^14",["^10",[["^45"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",258,"^X",258,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^45"]]]]],"^1>","TODO: Maybe make it public & access it from untangled-client ?"],"~$validator",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",706,"^W",7,"^X",706,"^Y",16,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Returns the validator symbol from the form field.\n\n  `form` The form props\n  `field` The field name"],"^9","~$untangled.ui.forms/validator","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",16,"^14",["^10",[["^1;","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",706,"^X",706,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Returns the validator symbol from the form field.\n\n  `form` The form props\n  `field` The field name"],"~$build-form",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",505,"^W",7,"^X",505,"^Y",17,"^[",["^10",["^11",["^10",[["^2X","~$entity-state"]]]]],"^1>","Build an empty form based on the given entity state. Returns an entity that is compatible with the original, but\n   that has had form support added. If any fields are declared on\n   the form that do not exist in the entity, then the form will fill those with\n   the default field values for the declared input fields.\n   This function does **not** recursively build out nested forms, even when declared. See `init-form`."],"^9","~$untangled.ui.forms/build-form","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",17,"^14",["^10",[["^2X","^4:"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",505,"^X",505,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^2X","^4:"]]]]],"^1>","Build an empty form based on the given entity state. Returns an entity that is compatible with the original, but\n   that has had form support added. If any fields are declared on\n   the form that do not exist in the entity, then the form will fill those with\n   the default field values for the declared input fields.\n   This function does **not** recursively build out nested forms, even when declared. See `init-form`."],"~$get-forms",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",396,"^W",7,"^X",396,"^Y",16,"^[",["^10",["^11",["^10",[["^28","~$root-form-class","^2Y"]]]]],"^1>","Reads the app state database starting at form-ident, and returns a sequence of :\n\n  {:ident ident :class form-class :form form-value}\n\n  for the top form and all of its **declared** subforms. Useful for running transforms and collection across a nested form.\n\n  If there are any to-many relations in the database, they will be expanded to individual entries of the returned sequence.\n  "],"^9","~$untangled.ui.forms/get-forms","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",16,"^14",["^10",[["^28","^4=","^2Y"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",396,"^X",396,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^28","^4=","^2Y"]]]]],"^1>","Reads the app state database starting at form-ident, and returns a sequence of :\n\n  {:ident ident :class form-class :form form-value}\n\n  for the top form and all of its **declared** subforms. Useful for running transforms and collection across a nested form.\n\n  If there are any to-many relations in the database, they will be expanded to individual entries of the returned sequence.\n  "],"~$form-spec",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",33,"^W",4,"^X",33,"^Y",13,"^3D","~$untangled.ui.forms/IForm","^1>","Returns the form specification,\n     ie: what the form is made of,\n     eg: fields, subforms, form change listeners.","^[",["^10",["^11",["^10",[["^3A"]]]]]],"^3D","^4@","^9","~$untangled.ui.forms/form-spec","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",13,"^14",["^10",[["^3A"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",32,"^X",33,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^3A"]]]]],"^1>","Returns the form specification,\n     ie: what the form is made of,\n     eg: fields, subforms, form change listeners."],"~$reset-entity",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",326,"^W",7,"^X",326,"^Y",19,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Resets the form back to the original state, ie when it was first created/initialized"],"^9","~$untangled.ui.forms/reset-entity","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",19,"^14",["^10",[["^1;"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",326,"^X",326,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Resets the form back to the original state, ie when it was first created/initialized"],"~$dropdown-input",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",163,"^W",7,"^X",163,"^Y",21,"^[",["^10",["^11",["^10",[["^1M","^2@","~$&",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]]]],"^1>","Declare a dropdown menu selector.\n\n  name is the keyword property name of the field\n  options is a vector of f/option items to display\n\n  Additional (optional) named parameters are `default-value` and `className`. The\n  default-value should be the `:key` of one of the options (defaults to :f/none).","^1?",["^ ","^13",true,"^17",2,"^14",[["^10",["^1M","^2@",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]],"^[",["^10",[["^1M","^2@","~$&",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/dropdown-input","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",21,"^1?",["^ ","^13",true,"^17",2,"^14",[["^10",["^1M","^2@",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]],"^[",["^10",[["^1M","^2@","~$&",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]],"^16",["^10",[null]]],"^14",[["^10",["^1M","^2@",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",163,"^X",163,"^17",2,"^18",true,"^[",["^10",[["^1M","^2@","~$&",["^ ","^2A",["^2B","^2C"],"^2D",["^ ","^2B","^2E","^2C",""]]]]],"^1>","Declare a dropdown menu selector.\n\n  name is the keyword property name of the field\n  options is a vector of f/option items to display\n\n  Additional (optional) named parameters are `default-value` and `className`. The\n  default-value should be the `:key` of one of the options (defaults to :f/none)."],"~$dirty-field?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",308,"^W",7,"^X",308,"^Y",19,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]]],"^9","~$untangled.ui.forms/dirty-field?","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",19,"^14",["^10",[["^1;","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",308,"^X",308,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]]],"~$form-key",["^ ","^9","~$untangled.ui.forms/form-key","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",42,"^W",1,"^X",42,"^Y",14,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",42,"^W",6,"^X",42,"^Y",14],"^1>","Query this in *all* of your form components, else form support will fail!\n   (often in subtle/obscure ways, WIP on how to better catch & report this)","^3>","~$any"],"~$init-one",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",544,"^W",7,"^X",544,"^Y",15,"^[",["^10",["^11",["^10",[["~$state","~$base-form","~$subform-spec","~$visited"]]]]]],"^9","~$untangled.ui.forms/init-one","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",15,"^14",["^10",[["^4L","^4M","^4N","^4O"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",544,"^X",544,"^17",4,"^18",true,"^[",["^10",["^11",["^10",[["^4L","^4M","^4N","^4O"]]]]]],"~$dirty?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",763,"^W",7,"^X",763,"^Y",13,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Checks if the top-level form, or any of the subforms, are dirty. NOTE: Forms remain dirty as long as they have tempids."],"^9","~$untangled.ui.forms/dirty?","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",13,"^14",["^10",[["^1;"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",763,"^X",763,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Checks if the top-level form, or any of the subforms, are dirty. NOTE: Forms remain dirty as long as they have tempids."],"~$form-root-key",["^ ","^9","~$untangled.ui.forms/form-root-key","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",47,"^W",1,"^X",47,"^Y",19,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",47,"^W",6,"^X",47,"^Y",19],"^1>","Query this in your top level form component.\n   Is okay to have multiple 'root' components on screen at once,\n   as om and react will optimize the rendering step.","^3>","^4J"],"~$subform-element",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",80,"^W",7,"^X",80,"^Y",22,"^[",["^10",["^11",["^10",[["^1R","^2X","~$cardinality","~$&",["^ ","^2A",["~$isComponent"]]]]]]],"^1>","Declare that the current form links to subforms through the given entity property in a :one or :many capacity. this\n  must be included in your list of form elements if you want form interactions to trigger across a form group.\n\n  Additional named parameters:\n\n  `isComponent` - A boolean to indicate that references to instances of this subform are the only uses of the target,\n  such that removing the reference indicates that the target is no longer used and can be removed from the database.","^1?",["^ ","^13",true,"^17",3,"^14",[["^10",["^1R","^2X","^4V",["^ ","^2A",["^4W"]]]]],"^[",["^10",[["^1R","^2X","^4V","~$&",["^ ","^2A",["^4W"]]]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/subform-element","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",22,"^1?",["^ ","^13",true,"^17",3,"^14",[["^10",["^1R","^2X","^4V",["^ ","^2A",["^4W"]]]]],"^[",["^10",[["^1R","^2X","^4V","~$&",["^ ","^2A",["^4W"]]]]],"^16",["^10",[null]]],"^14",[["^10",["^1R","^2X","^4V",["^ ","^2A",["^4W"]]]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",80,"^X",80,"^17",3,"^18",true,"^[",["^10",[["^1R","^2X","^4V","~$&",["^ ","^2A",["^4W"]]]]],"^1>","Declare that the current form links to subforms through the given entity property in a :one or :many capacity. this\n  must be included in your list of form elements if you want form interactions to trigger across a form group.\n\n  Additional named parameters:\n\n  `isComponent` - A boolean to indicate that references to instances of this subform are the only uses of the target,\n  such that removing the reference indicates that the target is no longer used and can be removed from the database."],"~$IForm",["^ ","^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",32,"^W",14,"^X",32,"^Y",19,"^1>",null,"~:protocol-symbol",true,"~:jsdoc",["^10",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","^4?",[["^3A"]]]]],"^4Z",true,"^9","^4@","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",19,"^W",1,"^V",32,"^50",["^ ","^51",["^ ","^4?",[["^3A"]]]],"~:info",null,"^X",32,"^3>","^4J","~:impls",["^8",[]],"^1>",null,"^4[",["^10",["@interface"]]],"~$entity-xform",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",1050,"^W",7,"^X",1050,"^Y",19,"^[",["^10",["^11",["^10",[["^4L","~$form-id","^2L"]]]]],"^1>","Modify the form's (under `form-id`) using `update-forms` and a passed in transform `xf`"],"^9","~$untangled.ui.forms/entity-xform","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",19,"^14",["^10",[["^4L","^55","^2L"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",1050,"^X",1050,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^4L","^55","^2L"]]]]],"^1>","Modify the form's (under `form-id`) using `update-forms` and a passed in transform `xf`"],"~$init-many",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",558,"^W",7,"^X",558,"^Y",16,"^[",["^10",["^11",["^10",[["^4L","^4M","^4N","^4O"]]]]]],"^9","~$untangled.ui.forms/init-many","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",16,"^14",["^10",[["^4L","^4M","^4N","^4O"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",558,"^X",558,"^17",4,"^18",true,"^[",["^10",["^11",["^10",[["^4L","^4M","^4N","^4O"]]]]]],"~$ui-field?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",262,"^W",7,"^X",262,"^Y",16,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","For checking if a field is only a ui concern.\n   eg: should therefore not be sent to the server."],"^9","~$untangled.ui.forms/ui-field?","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",16,"^14",["^10",[["^1;","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",262,"^X",262,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","For checking if a field is only a ui concern.\n   eg: should therefore not be sent to the server."],"~$transact!",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",999,"^W",4,"^X",999,"^Y",13,"^3D","^3E","^1>","Execute a transaction!","^[",["^10",["^11",["^10",[["^3A","~$tx"]]]]]],"^3D","^3E","^9","~$untangled.ui.forms/transact!","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",13,"^14",["^10",[["^3A","^5<"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",992,"^X",999,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^3A","^5<"]]]]],"^1>","Execute a transaction!"],"~$commit-state",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",321,"^W",7,"^X",321,"^Y",19,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Commits the state of the form to the entity, making it the new original data."],"^9","~$untangled.ui.forms/commit-state","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",19,"^14",["^10",[["^1;"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",321,"^X",321,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Commits the state of the form to the entity, making it the new original data."],"~$option",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",183,"^W",7,"^X",183,"^Y",13,"^[",["^10",["^11",["^10",[["~$key","~$label"]]]]],"^1>","Create an option for use in a dropdown. The key is used as your app database value, and label as the label."],"^9","~$untangled.ui.forms/option","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",13,"^14",["^10",[["^5A","^5B"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",183,"^X",183,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^5A","^5B"]]]]],"^1>","Create an option for use in a dropdown. The key is used as your app database value, and label as the label."],"~$is-form?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",225,"^W",7,"^X",225,"^Y",15,"^[",["^10",["^11",["^10",[["~$?form"]]]]]],"^9","~$untangled.ui.forms/is-form?","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",15,"^14",["^10",[["^5E"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",225,"^X",225,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^5E"]]]]]],"~$validate-forms",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",772,"^W",7,"^X",772,"^Y",21,"^[",["^10",["^11",["^10",[["^28","^55","~$&",["^1="]]]]]],"^1>","Run validation on an entire form (by ident) with subforms. Returns an updated app-state.","^1?",["^ ","^13",true,"^17",2,"^14",[["^10",["^28","^55",["^1="]]]],"^[",["^10",[["^28","^55","~$&",["^1="]]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/validate-forms","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",21,"^1?",["^ ","^13",true,"^17",2,"^14",[["^10",["^28","^55",["^1="]]]],"^[",["^10",[["^28","^55","~$&",["^1="]]]],"^16",["^10",[null]]],"^14",[["^10",["^28","^55",["^1="]]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",772,"^X",772,"^17",2,"^18",true,"^[",["^10",[["^28","^55","~$&",["^1="]]]],"^1>","Run validation on an entire form (by ident) with subforms. Returns an updated app-state."],"~$DBAdapter",["^ ","^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",992,"^W",14,"^X",992,"^Y",23,"^1>",null,"^4Z",true,"^4[",["^10",["@interface"]],"^50",["^ ","^51",["^ ","^3Y",[["^3A","^3Z"]],"^5;",[["^3A","^5<"]],"^3C",[["^3A"]],"~$parse-tx",[["^3A","~$tx-type","~$data"]]]]],"^4Z",true,"^9","^3E","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",23,"^W",1,"^V",992,"^50",["^ ","^51",["^ ","^3Y",[["^3A","^3Z"]],"^5;",[["^3A","^5<"]],"^3C",[["^3A"]],"^5J",[["^3A","^5K","^5L"]]]],"^52",null,"^X",992,"^3>","^4J","^53",["^8",[]],"^1>",null,"^4[",["^10",["@interface"]]],"~$set-validation",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",723,"^W",8,"^X",723,"^Y",22,"^Z",true,"^[",["^10",["^11",["^10",[["^1;","^1R","^25"]]]]]],"^Z",true,"^9","~$untangled.ui.forms/set-validation","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",22,"^14",["^10",[["^1;","^1R","^25"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",723,"^X",723,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1R","^25"]]]]]],"~$would-be-valid?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",752,"^W",7,"^X",752,"^Y",22,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Checks (recursively on this form and subforms) if the values on the given form would be\n  considered valid if full validation were to be run on the form. Returns true/false."],"^9","~$untangled.ui.forms/would-be-valid?","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",22,"^14",["^10",[["^1;"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",752,"^X",752,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Checks (recursively on this form and subforms) if the values on the given form would be\n  considered valid if full validation were to be run on the form. Returns true/false."],"~$validate-fields",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",745,"^W",7,"^X",745,"^Y",22,"^[",["^10",["^11",["^10",[["^1;","~$&",[["^ ","^2A",["~$skip-unchanged?"]]]]]]]],"^1>","Runs validation on the defined fields and returns a new form with them properly marked.","^1?",["^ ","^13",true,"^17",1,"^14",[["^10",["^1;",[["^ ","^2A",["^5R"]]]]]],"^[",["^10",[["^1;","~$&",[["^ ","^2A",["^5R"]]]]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/validate-fields","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",22,"^1?",["^ ","^13",true,"^17",1,"^14",[["^10",["^1;",[["^ ","^2A",["^5R"]]]]]],"^[",["^10",[["^1;","~$&",[["^ ","^2A",["^5R"]]]]]],"^16",["^10",[null]]],"^14",[["^10",["^1;",[["^ ","^2A",["^5R"]]]]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",745,"^X",745,"^17",1,"^18",true,"^[",["^10",[["^1;","~$&",[["^ ","^2A",["^5R"]]]]]],"^1>","Runs validation on the defined fields and returns a new form with them properly marked."],"~$init-form",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",590,"^W",7,"^X",590,"^Y",16,"^[",["^10",["^11",["^10",[["^28","^2X","^2Y"]]]]],"^1>","Recursively initialize a form from an app state database. Will follow subforms (even when top-levels are initialized).\n  Returns the new app state (can be used to `swap!` on app state atom). Will **not** add forms where there is not\n  already an entity in the database. If there are subforms, this function will only initialize those that are present\n  AND uninitialized. Under no circumstances will this function re-initialize a form or subform.\n\n  `app-state` The map of the current app state.\n  `form-class` The defui class that defines the top-level form.\n  `form-ident` The ident of the entity's data in app state."],"^9","~$untangled.ui.forms/init-form","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",16,"^14",["^10",[["^28","^2X","^2Y"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",590,"^X",590,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^28","^2X","^2Y"]]]]],"^1>","Recursively initialize a form from an app state database. Will follow subforms (even when top-levels are initialized).\n  Returns the new app state (can be used to `swap!` on app state atom). Will **not** add forms where there is not\n  already an entity in the database. If there are subforms, this function will only initialize those that are present\n  AND uninitialized. Under no circumstances will this function re-initialize a form or subform.\n\n  `app-state` The map of the current app state.\n  `form-class` The defui class that defines the top-level form.\n  `form-ident` The ident of the entity's data in app state."],"~$get-on-form-change-mutation",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",636,"^W",8,"^X",636,"^Y",35,"^Z",true,"^[",["^10",["^11",["^10",[["^1;","^1Y","~$kind"]]]]],"^1>","Get the Om mutation symbol to invoke when the form changes. This is typically used in the implementation\n  of form field renderers as part of the transaction to run on change and blur events.\n\n  Returns a valid symbolic data structure that can be used inside of transact:\n\n  ```\n  (om/transact! `[~@(get-on-form-change-mutation form :f :blur)])\n  ```\n\n  will convert to something like:\n\n  ```\n  (om/transact! `[(your-change-handler-symbol {:form-id [:form 1] :field :f :kind :blur})])\n  ```\n\n  This function returns a list of mutations expressions to run (which will contain zero or one).\n  Use list unquote to patch it into place."],"^Z",true,"^9","~$untangled.ui.forms/get-on-form-change-mutation","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",35,"^14",["^10",[["^1;","^1Y","^5W"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",636,"^X",636,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1Y","^5W"]]]]],"^1>","Get the Om mutation symbol to invoke when the form changes. This is typically used in the implementation\n  of form field renderers as part of the transaction to run on change and blur events.\n\n  Returns a valid symbolic data structure that can be used inside of transact:\n\n  ```\n  (om/transact! `[~@(get-on-form-change-mutation form :f :blur)])\n  ```\n\n  will convert to something like:\n\n  ```\n  (om/transact! `[(your-change-handler-symbol {:form-id [:form 1] :field :f :kind :blur})])\n  ```\n\n  This function returns a list of mutations expressions to run (which will contain zero or one).\n  Use list unquote to patch it into place."],"~$invalid?",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",667,"^W",7,"^X",667,"^Y",15,"^[",["^10",["^11",["^10",[["^1J"],["^1;","^1R"]]]]],"^1>","Returns true iff the form or field has been validated, and the validation failed.\n   Using this on a form ignores unchecked fields,\n   so you should run validate-entire-form! before trusting this value on a form.\n\n   SEE ALSO `would-be-valid?` if you'd like to pretend that full-form validation has been run\n   in a query-only sort of way.\n\n   `root-form` is the props of a top-level form. Evaluates form recursively.\n   `form` is the props of a specific form\n   `field` is a field to check on a specific form","^1?",["^ ","^13",false,"^17",2,"^14",["^10",[["^1J"],["^1;","^1R"]]],"^[",["^10",[["^1J"],["^1;","^1R"]]],"^16",["^10",[null,null]]]],"^9","~$untangled.ui.forms/invalid?","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",15,"^1?",["^ ","^13",false,"^17",2,"^14",["^10",[["^1J"],["^1;","^1R"]]],"^[",["^10",[["^1J"],["^1;","^1R"]]],"^16",["^10",[null,null]]],"^14",["^10",[["^1J"],["^1;","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",667,"^X",667,"^17",2,"^18",true,"^[",["^10",[["^1J"],["^1;","^1R"]]],"^1>","Returns true iff the form or field has been validated, and the validation failed.\n   Using this on a form ignores unchecked fields,\n   so you should run validate-entire-form! before trusting this value on a form.\n\n   SEE ALSO `would-be-valid?` if you'd like to pretend that full-form validation has been run\n   in a query-only sort of way.\n\n   `root-form` is the props of a top-level form. Evaluates form recursively.\n   `form` is the props of a specific form\n   `field` is a field to check on a specific form"],"~$validate-field*",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",735,"^W",7,"^X",735,"^Y",22,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Given a form and a field, returns a new form with that field validated. Does NOT recurse into subforms."],"^9","~$untangled.ui.forms/validate-field*","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",22,"^14",["^10",[["^1;","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",735,"^X",735,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Given a form and a field, returns a new form with that field validated. Does NOT recurse into subforms."],"^5J",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",1001,"^W",4,"^X",1001,"^Y",12,"^3D","^3E","^1>","Given a tx-type and data, transforms it into a db transaction.\n     OR TODO: Should this be add-tx, set-tx, etc...","^[",["^10",["^11",["^10",[["^3A","^5K","^5L"]]]]]],"^3D","^3E","^9","~$untangled.ui.forms/parse-tx","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",12,"^14",["^10",[["^3A","^5K","^5L"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",992,"^X",1001,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^3A","^5K","^5L"]]]]],"^1>","Given a tx-type and data, transforms it into a db transaction.\n     OR TODO: Should this be add-tx, set-tx, etc..."],"~$update-current-value",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",275,"^W",7,"^X",275,"^Y",27,"^[",["^10",["^11",["^10",[["^1;","^1R","~$f","~$&","~$args"]]]]],"^1>","Updates the current value of a field in a form (with a fn) and marks it as :unchecked.","^1?",["^ ","^13",true,"^17",3,"^14",[["^10",["^1;","^1R","~$f","^63"]]],"^[",["^10",[["^1;","^1R","~$f","~$&","^63"]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/update-current-value","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",27,"^1?",["^ ","^13",true,"^17",3,"^14",[["^10",["^1;","^1R","~$f","^63"]]],"^[",["^10",[["^1;","^1R","~$f","~$&","^63"]]],"^16",["^10",[null]]],"^14",[["^10",["^1;","^1R","~$f","^63"]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",275,"^X",275,"^17",3,"^18",true,"^[",["^10",[["^1;","^1R","~$f","~$&","^63"]]],"^1>","Updates the current value of a field in a form (with a fn) and marks it as :unchecked."],"~$text-input",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",117,"^W",7,"^X",117,"^Y",17,"^[",["^10",["^11",["^10",[["^1M","~$&",["^ ","^2A",["^47","^1Q","^2C","^2B","^3O","~$validate-on-blur?"],"^2D",["^ ","^3O","","^2B","","^2C","","^66",true]]]]]]],"^1>","Declare a text input on a form. The allowed options are named parameters:\n\n  :className nm    Additional CSS classnames to include on the input (as a string)\n  :validator sym   A symbol to target the dispatch of validation\n  :validator-args  Arguments that will be passed to the validator\n  :placeholder     The input placeholder. Supports a lambda or string\n  :default-value   A value to use in the field if the app-state value is nil\n  :validate-on-blur? Should the field be validated on a blur event (default = true)\n  ","^1?",["^ ","^13",true,"^17",1,"^14",[["^10",["^1M",["^ ","^2A",["^47","^1Q","^2C","^2B","^3O","^66"],"^2D",["^ ","^3O","","^2B","","^2C","","^66",true]]]]],"^[",["^10",[["^1M","~$&",["^ ","^2A",["^47","^1Q","^2C","^2B","^3O","^66"],"^2D",["^ ","^3O","","^2B","","^2C","","^66",true]]]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/text-input","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",17,"^1?",["^ ","^13",true,"^17",1,"^14",[["^10",["^1M",["^ ","^2A",["^47","^1Q","^2C","^2B","^3O","^66"],"^2D",["^ ","^3O","","^2B","","^2C","","^66",true]]]]],"^[",["^10",[["^1M","~$&",["^ ","^2A",["^47","^1Q","^2C","^2B","^3O","^66"],"^2D",["^ ","^3O","","^2B","","^2C","","^66",true]]]]],"^16",["^10",[null]]],"^14",[["^10",["^1M",["^ ","^2A",["^47","^1Q","^2C","^2B","^3O","^66"],"^2D",["^ ","^3O","","^2B","","^2C","","^66",true]]]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",117,"^X",117,"^17",1,"^18",true,"^[",["^10",[["^1M","~$&",["^ ","^2A",["^47","^1Q","^2C","^2B","^3O","^66"],"^2D",["^ ","^3O","","^2B","","^2C","","^66",true]]]]],"^1>","Declare a text input on a form. The allowed options are named parameters:\n\n  :className nm    Additional CSS classnames to include on the input (as a string)\n  :validator sym   A symbol to target the dispatch of validation\n  :validator-args  Arguments that will be passed to the validator\n  :placeholder     The input placeholder. Supports a lambda or string\n  :default-value   A value to use in the field if the app-state value is nil\n  :validate-on-blur? Should the field be validated on a blur event (default = true)\n  "],"~$default-state",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",476,"^W",7,"^X",476,"^Y",20,"^[",["^10",["^11",["^10",[["~$fields"]]]]],"^1>","INTERNAL METHOD. Get the default state configuration for the given field definitions.\n   MUST ONLY BE PASSED PURE FIELDS. Not subforms."],"^9","~$untangled.ui.forms/default-state","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",20,"^14",["^10",[["^69"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",476,"^X",476,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^69"]]]]],"^1>","INTERNAL METHOD. Get the default state configuration for the given field definitions.\n   MUST ONLY BE PASSED PURE FIELDS. Not subforms."],"~$get-original-data",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",298,"^W",7,"^X",298,"^Y",24,"^[",["^10",["^11",["^10",[["^1;"],["^1;","^1R"]]]]],"^1>","Get the unmodified copy of the form state from when it was first initialized.","^1?",["^ ","^13",false,"^17",2,"^14",["^10",[["^1;"],["^1;","^1R"]]],"^[",["^10",[["^1;"],["^1;","^1R"]]],"^16",["^10",[null,null]]]],"^9","~$untangled.ui.forms/get-original-data","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",24,"^1?",["^ ","^13",false,"^17",2,"^14",["^10",[["^1;"],["^1;","^1R"]]],"^[",["^10",[["^1;"],["^1;","^1R"]]],"^16",["^10",[null,null]]],"^14",["^10",[["^1;"],["^1;","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",298,"^X",298,"^17",2,"^18",true,"^[",["^10",[["^1;"],["^1;","^1R"]]],"^1>","Get the unmodified copy of the form state from when it was first initialized."],"~$subforms*",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",330,"^W",8,"^X",330,"^Y",17,"^Z",true,"^[",["^10",["^11",["^10",[["^2X"],["^2X","~$current-path"]]]]],"^1>","Returns a map whose keys are the query key-path from the component's query that point to subforms, and whose values are the\n   defui component of that form (e.g. `{ [:k :k2] Subform }`). This will give you ALL of the current subforms declared in the static query and IForm\n   fields. NOTE: union queries in grouped forms are not supported, since there would be no way to auto-gather non-displayed\n   forms in the 'current' state.\n\n   Use get-forms to obtain the current state of active forms. It is a gathering mechanism only.","^1?",["^ ","^13",false,"^17",2,"^14",["^10",[["^2X"],["^2X","^6>"]]],"^[",["^10",[["^2X"],["^2X","^6>"]]],"^16",["^10",[null,null]]]],"^Z",true,"^9","~$untangled.ui.forms/subforms*","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",17,"^1?",["^ ","^13",false,"^17",2,"^14",["^10",[["^2X"],["^2X","^6>"]]],"^[",["^10",[["^2X"],["^2X","^6>"]]],"^16",["^10",[null,null]]],"^14",["^10",[["^2X"],["^2X","^6>"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",330,"^X",330,"^17",2,"^18",true,"^[",["^10",[["^2X"],["^2X","^6>"]]],"^1>","Returns a map whose keys are the query key-path from the component's query that point to subforms, and whose values are the\n   defui component of that form (e.g. `{ [:k :k2] Subform }`). This will give you ALL of the current subforms declared in the static query and IForm\n   fields. NOTE: union queries in grouped forms are not supported, since there would be no way to auto-gather non-displayed\n   forms in the 'current' state.\n\n   Use get-forms to obtain the current state of active forms. It is a gathering mechanism only."],"~$form-field",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",836,"^W",7,"^X",836,"^Y",17,"^[",["^10",["^11",["^10",[["^1W","^1;","^1Y","~$&","^3Z"]]]]],"^1>","Function for rendering form fields. Call this to render, but `defmethod` on `form-field*`.","^1?",["^ ","^13",true,"^17",3,"^14",[["^10",["^1W","^1;","^1Y","^3Z"]]],"^[",["^10",[["^1W","^1;","^1Y","~$&","^3Z"]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/form-field","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",17,"^1?",["^ ","^13",true,"^17",3,"^14",[["^10",["^1W","^1;","^1Y","^3Z"]]],"^[",["^10",[["^1W","^1;","^1Y","~$&","^3Z"]]],"^16",["^10",[null]]],"^14",[["^10",["^1W","^1;","^1Y","^3Z"]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",836,"^X",836,"^17",3,"^18",true,"^[",["^10",[["^1W","^1;","^1Y","~$&","^3Z"]]],"^1>","Function for rendering form fields. Call this to render, but `defmethod` on `form-field*`."],"~$field-diff*",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",1005,"^W",8,"^X",1005,"^Y",19,"^Z",true,"^[",["^10",["^11",["^10",[["~$curr","~$orig","~$cfg"]]]]]],"^Z",true,"^9","~$untangled.ui.forms/field-diff*","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",19,"^14",["^10",[["^6C","^6D","^6E"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",1005,"^X",1005,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^6C","^6D","^6E"]]]]]],"~$field-config",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",235,"^W",7,"^X",235,"^Y",19,"^[",["^10",["^11",["^10",[["^1;","^1M"]]]]],"^1>","Get the configuration for the given field in the form."],"^9","~$untangled.ui.forms/field-config","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",19,"^14",["^10",[["^1;","^1M"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",235,"^X",235,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1M"]]]]],"^1>","Get the configuration for the given field in the form."],"~$form-switcher-input",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",99,"^W",7,"^X",99,"^Y",26,"^[",["^10",["^11",["^10",[["^1R","~$FormClass","~$select-key"]]]]],"^1>","Create a field that understands it points to a to-many list of subforms, only one of which\n  can be interacted with at a time, but all of which will be affected by top-level form operations like commit and\n  validate. Functions like `valid?` check the validity of the list of subforms when applied to such a\n  field. Rendering such a field requires that you pass the desired value of `select-key` to select the subform."],"^9","~$untangled.ui.forms/form-switcher-input","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",26,"^14",["^10",[["^1R","^6J","^6K"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",99,"^X",99,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^1R","^6J","^6K"]]]]],"^1>","Create a field that understands it points to a to-many list of subforms, only one of which\n  can be interacted with at a time, but all of which will be affected by top-level form operations like commit and\n  validate. Functions like `valid?` check the validity of the list of subforms when applied to such a\n  field. Rendering such a field requires that you pass the desired value of `select-key` to select the subform."],"~$assert-or-fail",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",24,"^W",7,"^X",24,"^Y",21,"^[",["^10",["^11",["^10",[["^2R","~$pred","^2Q","~$&",["^2S"]]]]]],"^1?",["^ ","^13",true,"^17",3,"^14",[["^10",["^2R","^6N","^2Q",["^2S"]]]],"^[",["^10",[["^2R","^6N","^2Q","~$&",["^2S"]]]],"^16",["^10",[null]]]],"^9","~$untangled.ui.forms/assert-or-fail","^13",true,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",21,"^1?",["^ ","^13",true,"^17",3,"^14",[["^10",["^2R","^6N","^2Q",["^2S"]]]],"^[",["^10",[["^2R","^6N","^2Q","~$&",["^2S"]]]],"^16",["^10",[null]]],"^14",[["^10",["^2R","^6N","^2Q",["^2S"]]]],"^15",null,"^16",["^10",[null]],"^W",1,"^V",24,"^X",24,"^17",3,"^18",true,"^[",["^10",[["^2R","^6N","^2Q","~$&",["^2S"]]]]],"^2Y",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",231,"^W",7,"^X",231,"^Y",17,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Get the ident of this form's entity"],"^9","~$untangled.ui.forms/form-ident","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",17,"^14",["^10",[["^1;"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",231,"^X",231,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Get the ident of this form's entity"],"~$current-validity",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",659,"^W",7,"^X",659,"^Y",23,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Returns the current validity from a form's props for the given field. One of :valid, :invalid, or :unchecked"],"^9","~$untangled.ui.forms/current-validity","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",23,"^14",["^10",[["^1;","^1R"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",659,"^X",659,"^17",2,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1R"]]]]],"^1>","Returns the current validity from a form's props for the given field. One of :valid, :invalid, or :unchecked"],"~$radio-button-id",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",935,"^W",7,"^X",935,"^Y",22,"^[",["^10",["^11",["^10",[["^1;","^1R","~$choice"]]]]],"^1>","Returns the generated ID of a form field component. Needed to label radio buttons"],"^9","~$untangled.ui.forms/radio-button-id","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",22,"^14",["^10",[["^1;","^1R","^6T"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",935,"^X",935,"^17",3,"^18",true,"^[",["^10",["^11",["^10",[["^1;","^1R","^6T"]]]]],"^1>","Returns the generated ID of a form field component. Needed to label radio buttons"],"~$element-names",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",294,"^W",7,"^X",294,"^Y",20,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Get all of the field names that are defined on the form."],"^9","~$untangled.ui.forms/element-names","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",20,"^14",["^10",[["^1;"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",294,"^X",294,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^1;"]]]]],"^1>","Get all of the field names that are defined on the form."],"~$ui-ns",["^ ","^S",null,"^T",["^ ","^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^V",38,"^W",8,"^X",38,"^Y",13,"^Z",true,"^[",["^10",["^11",["^10",[["~$kw-name"]]]]]],"^Z",true,"^9","~$untangled.ui.forms/ui-ns","^13",false,"^U","/Users/Stephen/projects/untangled-ui/src/main/untangled/ui/forms.cljc","^Y",13,"^14",["^10",[["^6Y"]]],"^15",null,"^16",["^10",[null,null]],"^W",1,"^V",38,"^X",38,"^17",1,"^18",true,"^[",["^10",["^11",["^10",[["^6Y"]]]]]]],"~:require-macros",["^ ","^A","^B","^B","^B","^J","^K","^K","^K","~$m","^6","^6","^6"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~$untangled.ui.forms/set-field","~:valid","~:input/default-value","~:one","~:skip-unchanged?","~:remote","~:input/is-component?","~:input/cardinality","~:min","~$untangled.ui.forms/in-range?","~:children","~:form/remove-relations","~$untangled.ui.forms/noop","~:validate-on-blur?","~:untangled.ui.forms/subform","~:key","~:option/label","~:placeholder","~:input/type","~:untangled.ui.forms/dropdown","~:failing/obj","~:input/name","~$untangled.ui.forms/toggle-field","~:on-form-change/mutation-symbol","~:validator","~:default","~:form/updates","^9","~:untangled.ui.forms/integer","~:value","~:unchecked","~:edit","~:default-value","~:untangled.ui.forms/this-form","~:params","~$untangled.ui.forms/select-option","^2E","~:ast","~$untangled.ui.forms/validate-field","~:field","~:type","~:isComponent","~:invalid","~:state","~:untangled.ui.forms/radio","~:onBlur","~:elements/by-name","~:input/validator","~:form/add-relations","~:component","~:subforms","~:elements","~$untangled.ui.forms/reset-from-entity","~:className","~:ast-node","~:input/placeholder","~:untangled.ui.forms/_","~:option/key","~:blur","~:max","~:label","~:class","~:input/validator-args","~:input/select-key","~:kind","~:subquery","~:ident","~:untangled.ui.forms/text","~:input/options","~:untangled.ui.forms/switcher","~:form/new-entities","~$untangled.ui.forms/commit-to-entity","~:action","~:input/css-class","~:origin","~:form-id","~:form","~:untangled.ui.forms/textarea","~:rerender","~:choice","~:target","~:input/is-form?","~:validator-args","~:validation","~:input/validate-on-blur?","~:query","~:on-form-change","~:onChange","~:hierarchy","~$...","~:untangled.ui.forms/identity","~$untangled.ui.forms/validate-form","~:many","~:untangled.ui.forms/checkbox","~:join"]],"~:ordernull]
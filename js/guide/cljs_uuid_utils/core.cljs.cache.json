["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Date",["^ ","~$prototype",["^ ","~$getTime",["^ "]]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cljs-uuid-utils.core","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^>","^>"],"~:uses",null,"~:defs",["^ ","~$uuid-string",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/cljs_uuid_utils/core.cljs","~:line",20,"~:column",7,"~:end-line",20,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^J",[["~$a-uuid"]]]]],"~:doc","(uuid-string a-uuid)  =>  uuid-str\n  Arguments and Values:\n  a-uuid --- a cljs.core/UUID instance.\n  uuid-str --- returns a string representation of the UUID instance\n  Description:\n  Returns the string representation of the UUID instance in the format of,\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" similarly to java.util.UUID/toString.\n  Note that this is different from cljs.core/UUID's EDN string-format.\n  Examples:\n  (def u (make-random-uuid))  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (uuid-string u) => \"305e764d-b451-47ae-a90d-5db782ac1f2e\""],"^9","~$cljs-uuid-utils.core/uuid-string","~:variadic",false,"^D","resources/public/js/guide/cljs_uuid_utils/core.cljs","^H",18,"~:method-params",["^J",[["^L"]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^F",1,"^E",20,"^G",20,"~:max-fixed-arity",1,"~:fn-var",true,"^I",["^J",["^K",["^J",[["^L"]]]]],"^M","(uuid-string a-uuid)  =>  uuid-str\n  Arguments and Values:\n  a-uuid --- a cljs.core/UUID instance.\n  uuid-str --- returns a string representation of the UUID instance\n  Description:\n  Returns the string representation of the UUID instance in the format of,\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" similarly to java.util.UUID/toString.\n  Note that this is different from cljs.core/UUID's EDN string-format.\n  Examples:\n  (def u (make-random-uuid))  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (uuid-string u) => \"305e764d-b451-47ae-a90d-5db782ac1f2e\""],"~$make-random-squuid",["^ ","^B",null,"^C",["^ ","^D","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/cljs_uuid_utils/core.cljs","^E",36,"^F",7,"^G",36,"^H",25,"^I",["^J",["^K",["^J",[[]]]]],"^M","(make-random-squuid)  =>  new-uuid\n  Arguments and Values:\n  new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated, semi-sequential SQUUID. \n  See http://docs.datomic.com/clojure/#datomic.api/squuid\n  Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-squuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-squuid)) => cljs.core/UUID"],"^9","~$cljs-uuid-utils.core/make-random-squuid","^O",false,"^D","resources/public/js/guide/cljs_uuid_utils/core.cljs","^H",25,"^P",["^J",[[]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",36,"^G",36,"^S",0,"^T",true,"^I",["^J",["^K",["^J",[[]]]]],"^M","(make-random-squuid)  =>  new-uuid\n  Arguments and Values:\n  new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated, semi-sequential SQUUID. \n  See http://docs.datomic.com/clojure/#datomic.api/squuid\n  Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-squuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-squuid)) => cljs.core/UUID"],"~$make-random-uuid",["^ ","^B",null,"^C",["^ ","^D","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/cljs_uuid_utils/core.cljs","^E",60,"^F",7,"^G",60,"^H",23,"^I",["^J",["^K",["^J",[[]]]]],"^M","(make-random-uuid)  =>  new-uuid\n  Arguments and Values:\n  new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated UUID,\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-uuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-uuid)) => cljs.core/UUID"],"^9","~$cljs-uuid-utils.core/make-random-uuid","^O",false,"^D","resources/public/js/guide/cljs_uuid_utils/core.cljs","^H",23,"^P",["^J",[[]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",60,"^G",60,"^S",0,"^T",true,"^I",["^J",["^K",["^J",[[]]]]],"^M","(make-random-uuid)  =>  new-uuid\n  Arguments and Values:\n  new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated UUID,\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-uuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-uuid)) => cljs.core/UUID"],"~$uuid-regex",["^ ","^9","~$cljs-uuid-utils.core/uuid-regex","^D","resources/public/js/guide/cljs_uuid_utils/core.cljs","^E",81,"^F",1,"^G",81,"^H",26,"~:private",true,"^C",["^ ","^D","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/cljs_uuid_utils/core.cljs","^E",81,"^F",16,"^G",81,"^H",26,"^[",true],"~:tag","~$any"],"~$valid-uuid?",["^ ","^B",null,"^C",["^ ","^D","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/cljs_uuid_utils/core.cljs","^E",86,"^F",7,"^G",86,"^H",18,"^I",["^J",["^K",["^J",[["~$maybe-uuid"]]]]],"^M","(valid-uuid? maybe-uuid)  =>  truthy-falsy\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n  Description:\n  Predicate to test whether a string representation conforms to a\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" format where each x is a hexadecimal character.\n  Input can be a maybe-uuid string or a cljs.core/UUID instance.\n  Note that the current \"cljs.core/UUID.\" constructor does not check for any conformance.\n  Examples:\n  (valid-uuid? \"NO-WAY\")  =>  nil\n  (valid-uuid? \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"YES-WAY\"))  => nil"],"^9","~$cljs-uuid-utils.core/valid-uuid?","^O",false,"^D","resources/public/js/guide/cljs_uuid_utils/core.cljs","^H",18,"^P",["^J",[["^13"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",86,"^G",86,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["^13"]]]]],"^M","(valid-uuid? maybe-uuid)  =>  truthy-falsy\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n  Description:\n  Predicate to test whether a string representation conforms to a\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" format where each x is a hexadecimal character.\n  Input can be a maybe-uuid string or a cljs.core/UUID instance.\n  Note that the current \"cljs.core/UUID.\" constructor does not check for any conformance.\n  Examples:\n  (valid-uuid? \"NO-WAY\")  =>  nil\n  (valid-uuid? \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"YES-WAY\"))  => nil"],"~$make-uuid-from",["^ ","^B",null,"^C",["^ ","^D","/Users/Stephen/projects/untangled-ui/resources/public/js/guide/cljs_uuid_utils/core.cljs","^E",112,"^F",7,"^G",112,"^H",21,"^I",["^J",["^K",["^J",[["^13"]]]]],"^M","(make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n  Description:\n  Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n  Input can be a string or a cljs.core/UUID instance.\n  Note that if the input UUID-instance is not valid, nil is returned.\n  Examples:\n  (make-uuid-from \"NO-WAY\")  =>  nil\n  (make-uuid-from \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"YES-WAY\"))  => nil"],"^9","~$cljs-uuid-utils.core/make-uuid-from","^O",false,"^D","resources/public/js/guide/cljs_uuid_utils/core.cljs","^H",21,"^P",["^J",[["^13"]]],"^Q",null,"^R",["^J",[null,null]],"^F",1,"^E",112,"^G",112,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["^13"]]]]],"^M","(make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n  Description:\n  Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n  Input can be a string or a cljs.core/UUID instance.\n  Note that if the input UUID-instance is not valid, nil is returned.\n  Examples:\n  (make-uuid-from \"NO-WAY\")  =>  nil\n  (make-uuid-from \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"YES-WAY\"))  => nil"]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:true"]],"~:order",["^1:"]],"^M","ClojureScript micro-library with an implementation of a type 4, random UUID generator compatible with RFC-4122 and cljs.core/UUID (make-random-uuid), a getter function to obtain the uuid string representation from a UUID-instance (uuid-string), a uuid-string conformance validating predicate (valid-uuid?), and a UUID factory from uuid-string with conformance validation (make-uuid-from)."]